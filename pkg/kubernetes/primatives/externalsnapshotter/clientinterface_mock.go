// Code generated by mockery v2.51.0. DO NOT EDIT.

package externalsnapshotter

import (
	context "context"

	v1 "github.com/kubernetes-csi/external-snapshotter/client/v8/apis/volumesnapshot/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// DeleteSnapshot provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockClientInterface) DeleteSnapshot(_a0 context.Context, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSnapshot'
type MockClientInterface_DeleteSnapshot_Call struct {
	*mock.Call
}

// DeleteSnapshot is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *MockClientInterface_Expecter) DeleteSnapshot(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockClientInterface_DeleteSnapshot_Call {
	return &MockClientInterface_DeleteSnapshot_Call{Call: _e.mock.On("DeleteSnapshot", _a0, _a1, _a2)}
}

func (_c *MockClientInterface_DeleteSnapshot_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *MockClientInterface_DeleteSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteSnapshot_Call) Return(_a0 error) *MockClientInterface_DeleteSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteSnapshot_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_DeleteSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// SnapshotVolume provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockClientInterface) SnapshotVolume(_a0 context.Context, _a1 string, _a2 string, _a3 SnapshotVolumeOptions) (*v1.VolumeSnapshot, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for SnapshotVolume")
	}

	var r0 *v1.VolumeSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, SnapshotVolumeOptions) (*v1.VolumeSnapshot, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, SnapshotVolumeOptions) *v1.VolumeSnapshot); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VolumeSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, SnapshotVolumeOptions) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_SnapshotVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SnapshotVolume'
type MockClientInterface_SnapshotVolume_Call struct {
	*mock.Call
}

// SnapshotVolume is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 SnapshotVolumeOptions
func (_e *MockClientInterface_Expecter) SnapshotVolume(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockClientInterface_SnapshotVolume_Call {
	return &MockClientInterface_SnapshotVolume_Call{Call: _e.mock.On("SnapshotVolume", _a0, _a1, _a2, _a3)}
}

func (_c *MockClientInterface_SnapshotVolume_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 SnapshotVolumeOptions)) *MockClientInterface_SnapshotVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(SnapshotVolumeOptions))
	})
	return _c
}

func (_c *MockClientInterface_SnapshotVolume_Call) Return(_a0 *v1.VolumeSnapshot, _a1 error) *MockClientInterface_SnapshotVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_SnapshotVolume_Call) RunAndReturn(run func(context.Context, string, string, SnapshotVolumeOptions) (*v1.VolumeSnapshot, error)) *MockClientInterface_SnapshotVolume_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForReadySnapshot provides a mock function with given fields: ctx, namespace, name, opts
func (_m *MockClientInterface) WaitForReadySnapshot(ctx context.Context, namespace string, name string, opts WaitForReadySnapshotOpts) error {
	ret := _m.Called(ctx, namespace, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for WaitForReadySnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, WaitForReadySnapshotOpts) error); ok {
		r0 = rf(ctx, namespace, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_WaitForReadySnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForReadySnapshot'
type MockClientInterface_WaitForReadySnapshot_Call struct {
	*mock.Call
}

// WaitForReadySnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - opts WaitForReadySnapshotOpts
func (_e *MockClientInterface_Expecter) WaitForReadySnapshot(ctx interface{}, namespace interface{}, name interface{}, opts interface{}) *MockClientInterface_WaitForReadySnapshot_Call {
	return &MockClientInterface_WaitForReadySnapshot_Call{Call: _e.mock.On("WaitForReadySnapshot", ctx, namespace, name, opts)}
}

func (_c *MockClientInterface_WaitForReadySnapshot_Call) Run(run func(ctx context.Context, namespace string, name string, opts WaitForReadySnapshotOpts)) *MockClientInterface_WaitForReadySnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(WaitForReadySnapshotOpts))
	})
	return _c
}

func (_c *MockClientInterface_WaitForReadySnapshot_Call) Return(_a0 error) *MockClientInterface_WaitForReadySnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_WaitForReadySnapshot_Call) RunAndReturn(run func(context.Context, string, string, WaitForReadySnapshotOpts) error) *MockClientInterface_WaitForReadySnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
