// Code generated by protoc-gen-go-grpcmock. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpcmock dev
// - protoc                 v5.29.3
// - testify                v1.10.0
// source: postgres.proto

package postgres_v1

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
)

type MockPostgresClient struct {
	mock.Mock
}

func NewMockPostgresClient() *MockPostgresClient {
	return &MockPostgresClient{}
}

func (c *MockPostgresClient) DumpAll(ctx context.Context, in *DumpAllRequest, opts ...grpc.CallOption) (*DumpAllResponse, error) {
	opts0 := []interface{}{ctx, in}
	for _, opts1 := range opts {
		opts0 = append(opts0, opts1)
	}
	args := c.Called(opts0...)
	var ret0 *DumpAllResponse
	if args.Get(0) != nil {
		ret0 = args.Get(0).(*DumpAllResponse)
	}
	return ret0, args.Error(1)
}

func (c *MockPostgresClient) OnDumpAll(ctx interface{}, in interface{}, opts ...interface{}) *mock.Call {
	return c.On("DumpAll", append([]interface{}{ctx, in}, opts...)...)
}

func (c *MockPostgresClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	opts0 := []interface{}{ctx, in}
	for _, opts1 := range opts {
		opts0 = append(opts0, opts1)
	}
	args := c.Called(opts0...)
	var ret0 *RestoreResponse
	if args.Get(0) != nil {
		ret0 = args.Get(0).(*RestoreResponse)
	}
	return ret0, args.Error(1)
}

func (c *MockPostgresClient) OnRestore(ctx interface{}, in interface{}, opts ...interface{}) *mock.Call {
	return c.On("Restore", append([]interface{}{ctx, in}, opts...)...)
}

type MockPostgresServer struct {
	mock.Mock
}

func NewMockPostgresServer() *MockPostgresServer {
	return &MockPostgresServer{}
}

func (s *MockPostgresServer) DumpAll(ctx context.Context, in *DumpAllRequest) (*DumpAllResponse, error) {
	args := s.Called(ctx, in)
	var ret0 *DumpAllResponse
	if args.Get(0) != nil {
		ret0 = args.Get(0).(*DumpAllResponse)
	}
	return ret0, args.Error(1)
}

func (s *MockPostgresServer) OnDumpAll(ctx interface{}, in interface{}) *mock.Call {
	return s.On("DumpAll", ctx, in)
}

func (s *MockPostgresServer) Restore(ctx context.Context, in *RestoreRequest) (*RestoreResponse, error) {
	args := s.Called(ctx, in)
	var ret0 *RestoreResponse
	if args.Get(0) != nil {
		ret0 = args.Get(0).(*RestoreResponse)
	}
	return ret0, args.Error(1)
}

func (s *MockPostgresServer) OnRestore(ctx interface{}, in interface{}) *mock.Call {
	return s.On("Restore", ctx, in)
}
