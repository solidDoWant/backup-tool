// Code generated by protoc-gen-go-grpcmock. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpcmock dev
// - protoc                 v5.29.3
// - testify                v1.10.0
// source: s3.proto

package s3_v1

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
)

type MockS3Client struct {
	mock.Mock
}

func NewMockS3Client() *MockS3Client {
	return &MockS3Client{}
}

func (c *MockS3Client) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	opts0 := []interface{}{ctx, in}
	for _, opts1 := range opts {
		opts0 = append(opts0, opts1)
	}
	args := c.Called(opts0...)
	var ret0 *SyncResponse
	if args.Get(0) != nil {
		ret0 = args.Get(0).(*SyncResponse)
	}
	return ret0, args.Error(1)
}

func (c *MockS3Client) OnSync(ctx interface{}, in interface{}, opts ...interface{}) *mock.Call {
	return c.On("Sync", append([]interface{}{ctx, in}, opts...)...)
}

type MockS3Server struct {
	mock.Mock
}

func NewMockS3Server() *MockS3Server {
	return &MockS3Server{}
}

func (s *MockS3Server) Sync(ctx context.Context, in *SyncRequest) (*SyncResponse, error) {
	args := s.Called(ctx, in)
	var ret0 *SyncResponse
	if args.Get(0) != nil {
		ret0 = args.Get(0).(*SyncResponse)
	}
	return ret0, args.Error(1)
}

func (s *MockS3Server) OnSync(ctx interface{}, in interface{}) *mock.Call {
	return s.On("Sync", ctx, in)
}
