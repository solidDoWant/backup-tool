// Code generated by mockery v2.51.0. DO NOT EDIT.

package clients

import (
	files "github.com/solidDoWant/backup-tool/pkg/files"
	mock "github.com/stretchr/testify/mock"

	postgres "github.com/solidDoWant/backup-tool/pkg/postgres"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockClientInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClientInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClientInterface_Expecter) Close() *MockClientInterface_Close_Call {
	return &MockClientInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClientInterface_Close_Call) Run(run func()) *MockClientInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientInterface_Close_Call) Return(_a0 error) *MockClientInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_Close_Call) RunAndReturn(run func() error) *MockClientInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Files provides a mock function with no fields
func (_m *MockClientInterface) Files() files.Runtime {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Files")
	}

	var r0 files.Runtime
	if rf, ok := ret.Get(0).(func() files.Runtime); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(files.Runtime)
		}
	}

	return r0
}

// MockClientInterface_Files_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Files'
type MockClientInterface_Files_Call struct {
	*mock.Call
}

// Files is a helper method to define mock.On call
func (_e *MockClientInterface_Expecter) Files() *MockClientInterface_Files_Call {
	return &MockClientInterface_Files_Call{Call: _e.mock.On("Files")}
}

func (_c *MockClientInterface_Files_Call) Run(run func()) *MockClientInterface_Files_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientInterface_Files_Call) Return(_a0 files.Runtime) *MockClientInterface_Files_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_Files_Call) RunAndReturn(run func() files.Runtime) *MockClientInterface_Files_Call {
	_c.Call.Return(run)
	return _c
}

// Postgres provides a mock function with no fields
func (_m *MockClientInterface) Postgres() postgres.Runtime {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Postgres")
	}

	var r0 postgres.Runtime
	if rf, ok := ret.Get(0).(func() postgres.Runtime); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(postgres.Runtime)
		}
	}

	return r0
}

// MockClientInterface_Postgres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Postgres'
type MockClientInterface_Postgres_Call struct {
	*mock.Call
}

// Postgres is a helper method to define mock.On call
func (_e *MockClientInterface_Expecter) Postgres() *MockClientInterface_Postgres_Call {
	return &MockClientInterface_Postgres_Call{Call: _e.mock.On("Postgres")}
}

func (_c *MockClientInterface_Postgres_Call) Run(run func()) *MockClientInterface_Postgres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientInterface_Postgres_Call) Return(_a0 postgres.Runtime) *MockClientInterface_Postgres_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_Postgres_Call) RunAndReturn(run func() postgres.Runtime) *MockClientInterface_Postgres_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
