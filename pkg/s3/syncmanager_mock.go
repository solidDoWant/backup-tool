// Code generated by mockery v2.51.0. DO NOT EDIT.

package s3

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MocksyncManager is an autogenerated mock type for the syncManager type
type MocksyncManager struct {
	mock.Mock
}

type MocksyncManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksyncManager) EXPECT() *MocksyncManager_Expecter {
	return &MocksyncManager_Expecter{mock: &_m.Mock}
}

// SyncWithContext provides a mock function with given fields: ctx, src, dest
func (_m *MocksyncManager) SyncWithContext(ctx context.Context, src string, dest string) error {
	ret := _m.Called(ctx, src, dest)

	if len(ret) == 0 {
		panic("no return value specified for SyncWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, src, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MocksyncManager_SyncWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncWithContext'
type MocksyncManager_SyncWithContext_Call struct {
	*mock.Call
}

// SyncWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - src string
//   - dest string
func (_e *MocksyncManager_Expecter) SyncWithContext(ctx interface{}, src interface{}, dest interface{}) *MocksyncManager_SyncWithContext_Call {
	return &MocksyncManager_SyncWithContext_Call{Call: _e.mock.On("SyncWithContext", ctx, src, dest)}
}

func (_c *MocksyncManager_SyncWithContext_Call) Run(run func(ctx context.Context, src string, dest string)) *MocksyncManager_SyncWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MocksyncManager_SyncWithContext_Call) Return(_a0 error) *MocksyncManager_SyncWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocksyncManager_SyncWithContext_Call) RunAndReturn(run func(context.Context, string, string) error) *MocksyncManager_SyncWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksyncManager creates a new instance of MocksyncManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksyncManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksyncManager {
	mock := &MocksyncManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
