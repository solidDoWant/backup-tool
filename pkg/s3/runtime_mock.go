// Code generated by mockery v2.51.0. DO NOT EDIT.

package s3

import (
	contexts "github.com/solidDoWant/backup-tool/pkg/contexts"
	mock "github.com/stretchr/testify/mock"
)

// MockRuntime is an autogenerated mock type for the Runtime type
type MockRuntime struct {
	mock.Mock
}

type MockRuntime_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuntime) EXPECT() *MockRuntime_Expecter {
	return &MockRuntime_Expecter{mock: &_m.Mock}
}

// Sync provides a mock function with given fields: ctx, credentials, src, dest
func (_m *MockRuntime) Sync(ctx *contexts.Context, credentials CredentialsInterface, src string, dest string) error {
	ret := _m.Called(ctx, credentials, src, dest)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.Context, CredentialsInterface, string, string) error); ok {
		r0 = rf(ctx, credentials, src, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntime_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockRuntime_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx *contexts.Context
//   - credentials CredentialsInterface
//   - src string
//   - dest string
func (_e *MockRuntime_Expecter) Sync(ctx interface{}, credentials interface{}, src interface{}, dest interface{}) *MockRuntime_Sync_Call {
	return &MockRuntime_Sync_Call{Call: _e.mock.On("Sync", ctx, credentials, src, dest)}
}

func (_c *MockRuntime_Sync_Call) Run(run func(ctx *contexts.Context, credentials CredentialsInterface, src string, dest string)) *MockRuntime_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context), args[1].(CredentialsInterface), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRuntime_Sync_Call) Return(_a0 error) *MockRuntime_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntime_Sync_Call) RunAndReturn(run func(*contexts.Context, CredentialsInterface, string, string) error) *MockRuntime_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRuntime creates a new instance of MockRuntime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntime(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuntime {
	mock := &MockRuntime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
