// Code generated by mockery v2.51.0. DO NOT EDIT.

package features

import (
	context "context"

	cobra "github.com/spf13/cobra"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigFileCommandInterface is an autogenerated mock type for the ConfigFileCommandInterface type
type MockConfigFileCommandInterface[T interface{}] struct {
	mock.Mock
}

type MockConfigFileCommandInterface_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockConfigFileCommandInterface[T]) EXPECT() *MockConfigFileCommandInterface_Expecter[T] {
	return &MockConfigFileCommandInterface_Expecter[T]{mock: &_m.Mock}
}

// ConfigureFlags provides a mock function with given fields: cmd
func (_m *MockConfigFileCommandInterface[T]) ConfigureFlags(cmd *cobra.Command) {
	_m.Called(cmd)
}

// MockConfigFileCommandInterface_ConfigureFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureFlags'
type MockConfigFileCommandInterface_ConfigureFlags_Call[T interface{}] struct {
	*mock.Call
}

// ConfigureFlags is a helper method to define mock.On call
//   - cmd *cobra.Command
func (_e *MockConfigFileCommandInterface_Expecter[T]) ConfigureFlags(cmd interface{}) *MockConfigFileCommandInterface_ConfigureFlags_Call[T] {
	return &MockConfigFileCommandInterface_ConfigureFlags_Call[T]{Call: _e.mock.On("ConfigureFlags", cmd)}
}

func (_c *MockConfigFileCommandInterface_ConfigureFlags_Call[T]) Run(run func(cmd *cobra.Command)) *MockConfigFileCommandInterface_ConfigureFlags_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cobra.Command))
	})
	return _c
}

func (_c *MockConfigFileCommandInterface_ConfigureFlags_Call[T]) Return() *MockConfigFileCommandInterface_ConfigureFlags_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockConfigFileCommandInterface_ConfigureFlags_Call[T]) RunAndReturn(run func(*cobra.Command)) *MockConfigFileCommandInterface_ConfigureFlags_Call[T] {
	_c.Run(run)
	return _c
}

// GenerateConfigSchema provides a mock function with no fields
func (_m *MockConfigFileCommandInterface[T]) GenerateConfigSchema() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateConfigSchema")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigFileCommandInterface_GenerateConfigSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateConfigSchema'
type MockConfigFileCommandInterface_GenerateConfigSchema_Call[T interface{}] struct {
	*mock.Call
}

// GenerateConfigSchema is a helper method to define mock.On call
func (_e *MockConfigFileCommandInterface_Expecter[T]) GenerateConfigSchema() *MockConfigFileCommandInterface_GenerateConfigSchema_Call[T] {
	return &MockConfigFileCommandInterface_GenerateConfigSchema_Call[T]{Call: _e.mock.On("GenerateConfigSchema")}
}

func (_c *MockConfigFileCommandInterface_GenerateConfigSchema_Call[T]) Run(run func()) *MockConfigFileCommandInterface_GenerateConfigSchema_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigFileCommandInterface_GenerateConfigSchema_Call[T]) Return(_a0 []byte, _a1 error) *MockConfigFileCommandInterface_GenerateConfigSchema_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigFileCommandInterface_GenerateConfigSchema_Call[T]) RunAndReturn(run func() ([]byte, error)) *MockConfigFileCommandInterface_GenerateConfigSchema_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ReadConfigFile provides a mock function with given fields: ctx
func (_m *MockConfigFileCommandInterface[T]) ReadConfigFile(ctx context.Context) (T, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadConfigFile")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (T, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) T); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigFileCommandInterface_ReadConfigFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadConfigFile'
type MockConfigFileCommandInterface_ReadConfigFile_Call[T interface{}] struct {
	*mock.Call
}

// ReadConfigFile is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigFileCommandInterface_Expecter[T]) ReadConfigFile(ctx interface{}) *MockConfigFileCommandInterface_ReadConfigFile_Call[T] {
	return &MockConfigFileCommandInterface_ReadConfigFile_Call[T]{Call: _e.mock.On("ReadConfigFile", ctx)}
}

func (_c *MockConfigFileCommandInterface_ReadConfigFile_Call[T]) Run(run func(ctx context.Context)) *MockConfigFileCommandInterface_ReadConfigFile_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigFileCommandInterface_ReadConfigFile_Call[T]) Return(_a0 T, _a1 error) *MockConfigFileCommandInterface_ReadConfigFile_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigFileCommandInterface_ReadConfigFile_Call[T]) RunAndReturn(run func(context.Context) (T, error)) *MockConfigFileCommandInterface_ReadConfigFile_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigFileCommandInterface creates a new instance of MockConfigFileCommandInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigFileCommandInterface[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigFileCommandInterface[T] {
	mock := &MockConfigFileCommandInterface[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
