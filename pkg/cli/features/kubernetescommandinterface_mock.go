// Code generated by mockery v2.51.0. DO NOT EDIT.

package features

import (
	cobra "github.com/spf13/cobra"
	mock "github.com/stretchr/testify/mock"

	rest "k8s.io/client-go/rest"
)

// MockKubernetesCommandInterface is an autogenerated mock type for the KubernetesCommandInterface type
type MockKubernetesCommandInterface struct {
	mock.Mock
}

type MockKubernetesCommandInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKubernetesCommandInterface) EXPECT() *MockKubernetesCommandInterface_Expecter {
	return &MockKubernetesCommandInterface_Expecter{mock: &_m.Mock}
}

// ConfigureFlags provides a mock function with given fields: cmd
func (_m *MockKubernetesCommandInterface) ConfigureFlags(cmd *cobra.Command) {
	_m.Called(cmd)
}

// MockKubernetesCommandInterface_ConfigureFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureFlags'
type MockKubernetesCommandInterface_ConfigureFlags_Call struct {
	*mock.Call
}

// ConfigureFlags is a helper method to define mock.On call
//   - cmd *cobra.Command
func (_e *MockKubernetesCommandInterface_Expecter) ConfigureFlags(cmd interface{}) *MockKubernetesCommandInterface_ConfigureFlags_Call {
	return &MockKubernetesCommandInterface_ConfigureFlags_Call{Call: _e.mock.On("ConfigureFlags", cmd)}
}

func (_c *MockKubernetesCommandInterface_ConfigureFlags_Call) Run(run func(cmd *cobra.Command)) *MockKubernetesCommandInterface_ConfigureFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cobra.Command))
	})
	return _c
}

func (_c *MockKubernetesCommandInterface_ConfigureFlags_Call) Return() *MockKubernetesCommandInterface_ConfigureFlags_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockKubernetesCommandInterface_ConfigureFlags_Call) RunAndReturn(run func(*cobra.Command)) *MockKubernetesCommandInterface_ConfigureFlags_Call {
	_c.Run(run)
	return _c
}

// GetClusterConfig provides a mock function with no fields
func (_m *MockKubernetesCommandInterface) GetClusterConfig() (*rest.Config, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterConfig")
	}

	var r0 *rest.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (*rest.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKubernetesCommandInterface_GetClusterConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterConfig'
type MockKubernetesCommandInterface_GetClusterConfig_Call struct {
	*mock.Call
}

// GetClusterConfig is a helper method to define mock.On call
func (_e *MockKubernetesCommandInterface_Expecter) GetClusterConfig() *MockKubernetesCommandInterface_GetClusterConfig_Call {
	return &MockKubernetesCommandInterface_GetClusterConfig_Call{Call: _e.mock.On("GetClusterConfig")}
}

func (_c *MockKubernetesCommandInterface_GetClusterConfig_Call) Run(run func()) *MockKubernetesCommandInterface_GetClusterConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKubernetesCommandInterface_GetClusterConfig_Call) Return(_a0 *rest.Config, _a1 error) *MockKubernetesCommandInterface_GetClusterConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKubernetesCommandInterface_GetClusterConfig_Call) RunAndReturn(run func() (*rest.Config, error)) *MockKubernetesCommandInterface_GetClusterConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKubernetesCommandInterface creates a new instance of MockKubernetesCommandInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKubernetesCommandInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKubernetesCommandInterface {
	mock := &MockKubernetesCommandInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
