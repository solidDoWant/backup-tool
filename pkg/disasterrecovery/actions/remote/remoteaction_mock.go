// Code generated by mockery v2.51.0. DO NOT EDIT.

package remote

import (
	clients "github.com/solidDoWant/backup-tool/pkg/grpc/clients"
	backuptoolinstance "github.com/solidDoWant/backup-tool/pkg/kubecluster/composite/backuptoolinstance"

	contexts "github.com/solidDoWant/backup-tool/pkg/contexts"

	mock "github.com/stretchr/testify/mock"
)

// MockRemoteAction is an autogenerated mock type for the RemoteAction type
type MockRemoteAction struct {
	mock.Mock
}

type MockRemoteAction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteAction) EXPECT() *MockRemoteAction_Expecter {
	return &MockRemoteAction_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, backupToolClient
func (_m *MockRemoteAction) Execute(ctx *contexts.Context, backupToolClient clients.ClientInterface) error {
	ret := _m.Called(ctx, backupToolClient)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.Context, clients.ClientInterface) error); ok {
		r0 = rf(ctx, backupToolClient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteAction_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockRemoteAction_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx *contexts.Context
//   - backupToolClient clients.ClientInterface
func (_e *MockRemoteAction_Expecter) Execute(ctx interface{}, backupToolClient interface{}) *MockRemoteAction_Execute_Call {
	return &MockRemoteAction_Execute_Call{Call: _e.mock.On("Execute", ctx, backupToolClient)}
}

func (_c *MockRemoteAction_Execute_Call) Run(run func(ctx *contexts.Context, backupToolClient clients.ClientInterface)) *MockRemoteAction_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context), args[1].(clients.ClientInterface))
	})
	return _c
}

func (_c *MockRemoteAction_Execute_Call) Return(_a0 error) *MockRemoteAction_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteAction_Execute_Call) RunAndReturn(run func(*contexts.Context, clients.ClientInterface) error) *MockRemoteAction_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields: ctx, btiOpts
func (_m *MockRemoteAction) Setup(ctx *contexts.Context, btiOpts *backuptoolinstance.CreateBackupToolInstanceOptions) error {
	ret := _m.Called(ctx, btiOpts)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.Context, *backuptoolinstance.CreateBackupToolInstanceOptions) error); ok {
		r0 = rf(ctx, btiOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteAction_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type MockRemoteAction_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - ctx *contexts.Context
//   - btiOpts *backuptoolinstance.CreateBackupToolInstanceOptions
func (_e *MockRemoteAction_Expecter) Setup(ctx interface{}, btiOpts interface{}) *MockRemoteAction_Setup_Call {
	return &MockRemoteAction_Setup_Call{Call: _e.mock.On("Setup", ctx, btiOpts)}
}

func (_c *MockRemoteAction_Setup_Call) Run(run func(ctx *contexts.Context, btiOpts *backuptoolinstance.CreateBackupToolInstanceOptions)) *MockRemoteAction_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context), args[1].(*backuptoolinstance.CreateBackupToolInstanceOptions))
	})
	return _c
}

func (_c *MockRemoteAction_Setup_Call) Return(_a0 error) *MockRemoteAction_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteAction_Setup_Call) RunAndReturn(run func(*contexts.Context, *backuptoolinstance.CreateBackupToolInstanceOptions) error) *MockRemoteAction_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: ctx
func (_m *MockRemoteAction) Validate(ctx *contexts.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteAction_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockRemoteAction_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx *contexts.Context
func (_e *MockRemoteAction_Expecter) Validate(ctx interface{}) *MockRemoteAction_Validate_Call {
	return &MockRemoteAction_Validate_Call{Call: _e.mock.On("Validate", ctx)}
}

func (_c *MockRemoteAction_Validate_Call) Run(run func(ctx *contexts.Context)) *MockRemoteAction_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context))
	})
	return _c
}

func (_c *MockRemoteAction_Validate_Call) Return(_a0 error) *MockRemoteAction_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteAction_Validate_Call) RunAndReturn(run func(*contexts.Context) error) *MockRemoteAction_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteAction creates a new instance of MockRemoteAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteAction {
	mock := &MockRemoteAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
