// Code generated by mockery v2.51.0. DO NOT EDIT.

package remote

import (
	contexts "github.com/solidDoWant/backup-tool/pkg/contexts"
	mock "github.com/stretchr/testify/mock"
)

// MockRemoteStageInterface is an autogenerated mock type for the RemoteStageInterface type
type MockRemoteStageInterface struct {
	mock.Mock
}

type MockRemoteStageInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteStageInterface) EXPECT() *MockRemoteStageInterface_Expecter {
	return &MockRemoteStageInterface_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx
func (_m *MockRemoteStageInterface) Run(ctx *contexts.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteStageInterface_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockRemoteStageInterface_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx *contexts.Context
func (_e *MockRemoteStageInterface_Expecter) Run(ctx interface{}) *MockRemoteStageInterface_Run_Call {
	return &MockRemoteStageInterface_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockRemoteStageInterface_Run_Call) Run(run func(ctx *contexts.Context)) *MockRemoteStageInterface_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context))
	})
	return _c
}

func (_c *MockRemoteStageInterface_Run_Call) Return(_a0 error) *MockRemoteStageInterface_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteStageInterface_Run_Call) RunAndReturn(run func(*contexts.Context) error) *MockRemoteStageInterface_Run_Call {
	_c.Call.Return(run)
	return _c
}

// WithAction provides a mock function with given fields: friendlyName, action
func (_m *MockRemoteStageInterface) WithAction(friendlyName string, action RemoteAction) RemoteStageInterface {
	ret := _m.Called(friendlyName, action)

	if len(ret) == 0 {
		panic("no return value specified for WithAction")
	}

	var r0 RemoteStageInterface
	if rf, ok := ret.Get(0).(func(string, RemoteAction) RemoteStageInterface); ok {
		r0 = rf(friendlyName, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RemoteStageInterface)
		}
	}

	return r0
}

// MockRemoteStageInterface_WithAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithAction'
type MockRemoteStageInterface_WithAction_Call struct {
	*mock.Call
}

// WithAction is a helper method to define mock.On call
//   - friendlyName string
//   - action RemoteAction
func (_e *MockRemoteStageInterface_Expecter) WithAction(friendlyName interface{}, action interface{}) *MockRemoteStageInterface_WithAction_Call {
	return &MockRemoteStageInterface_WithAction_Call{Call: _e.mock.On("WithAction", friendlyName, action)}
}

func (_c *MockRemoteStageInterface_WithAction_Call) Run(run func(friendlyName string, action RemoteAction)) *MockRemoteStageInterface_WithAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(RemoteAction))
	})
	return _c
}

func (_c *MockRemoteStageInterface_WithAction_Call) Return(_a0 RemoteStageInterface) *MockRemoteStageInterface_WithAction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteStageInterface_WithAction_Call) RunAndReturn(run func(string, RemoteAction) RemoteStageInterface) *MockRemoteStageInterface_WithAction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteStageInterface creates a new instance of MockRemoteStageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteStageInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteStageInterface {
	mock := &MockRemoteStageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
