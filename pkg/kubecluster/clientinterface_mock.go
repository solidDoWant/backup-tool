// Code generated by mockery v2.51.0. DO NOT EDIT.

package kubecluster

import (
	certmanager "github.com/solidDoWant/backup-tool/pkg/kubecluster/primatives/certmanager"
	cnpg "github.com/solidDoWant/backup-tool/pkg/kubecluster/primatives/cnpg"

	context "context"

	core "github.com/solidDoWant/backup-tool/pkg/kubecluster/primatives/core"

	externalsnapshotter "github.com/solidDoWant/backup-tool/pkg/kubecluster/primatives/externalsnapshotter"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CM provides a mock function with no fields
func (_m *MockClientInterface) CM() certmanager.ClientInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CM")
	}

	var r0 certmanager.ClientInterface
	if rf, ok := ret.Get(0).(func() certmanager.ClientInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certmanager.ClientInterface)
		}
	}

	return r0
}

// MockClientInterface_CM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CM'
type MockClientInterface_CM_Call struct {
	*mock.Call
}

// CM is a helper method to define mock.On call
func (_e *MockClientInterface_Expecter) CM() *MockClientInterface_CM_Call {
	return &MockClientInterface_CM_Call{Call: _e.mock.On("CM")}
}

func (_c *MockClientInterface_CM_Call) Run(run func()) *MockClientInterface_CM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientInterface_CM_Call) Return(_a0 certmanager.ClientInterface) *MockClientInterface_CM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_CM_Call) RunAndReturn(run func() certmanager.ClientInterface) *MockClientInterface_CM_Call {
	_c.Call.Return(run)
	return _c
}

// CNPG provides a mock function with no fields
func (_m *MockClientInterface) CNPG() cnpg.ClientInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CNPG")
	}

	var r0 cnpg.ClientInterface
	if rf, ok := ret.Get(0).(func() cnpg.ClientInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cnpg.ClientInterface)
		}
	}

	return r0
}

// MockClientInterface_CNPG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CNPG'
type MockClientInterface_CNPG_Call struct {
	*mock.Call
}

// CNPG is a helper method to define mock.On call
func (_e *MockClientInterface_Expecter) CNPG() *MockClientInterface_CNPG_Call {
	return &MockClientInterface_CNPG_Call{Call: _e.mock.On("CNPG")}
}

func (_c *MockClientInterface_CNPG_Call) Run(run func()) *MockClientInterface_CNPG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientInterface_CNPG_Call) Return(_a0 cnpg.ClientInterface) *MockClientInterface_CNPG_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_CNPG_Call) RunAndReturn(run func() cnpg.ClientInterface) *MockClientInterface_CNPG_Call {
	_c.Call.Return(run)
	return _c
}

// CloneCluster provides a mock function with given fields: ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts
func (_m *MockClientInterface) CloneCluster(ctx context.Context, namespace string, existingClusterName string, newClusterName string, servingCertIssuerName string, clientCertIssuerName string, opts CloneClusterOptions) (ClonedClusterInterface, error) {
	ret := _m.Called(ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)

	if len(ret) == 0 {
		panic("no return value specified for CloneCluster")
	}

	var r0 ClonedClusterInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, CloneClusterOptions) (ClonedClusterInterface, error)); ok {
		return rf(ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, CloneClusterOptions) ClonedClusterInterface); ok {
		r0 = rf(ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClonedClusterInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, CloneClusterOptions) error); ok {
		r1 = rf(ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CloneCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneCluster'
type MockClientInterface_CloneCluster_Call struct {
	*mock.Call
}

// CloneCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - existingClusterName string
//   - newClusterName string
//   - servingCertIssuerName string
//   - clientCertIssuerName string
//   - opts CloneClusterOptions
func (_e *MockClientInterface_Expecter) CloneCluster(ctx interface{}, namespace interface{}, existingClusterName interface{}, newClusterName interface{}, servingCertIssuerName interface{}, clientCertIssuerName interface{}, opts interface{}) *MockClientInterface_CloneCluster_Call {
	return &MockClientInterface_CloneCluster_Call{Call: _e.mock.On("CloneCluster", ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)}
}

func (_c *MockClientInterface_CloneCluster_Call) Run(run func(ctx context.Context, namespace string, existingClusterName string, newClusterName string, servingCertIssuerName string, clientCertIssuerName string, opts CloneClusterOptions)) *MockClientInterface_CloneCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(CloneClusterOptions))
	})
	return _c
}

func (_c *MockClientInterface_CloneCluster_Call) Return(cluster ClonedClusterInterface, err error) *MockClientInterface_CloneCluster_Call {
	_c.Call.Return(cluster, err)
	return _c
}

func (_c *MockClientInterface_CloneCluster_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, CloneClusterOptions) (ClonedClusterInterface, error)) *MockClientInterface_CloneCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ClonePVC provides a mock function with given fields: ctx, namespace, pvcName, opts
func (_m *MockClientInterface) ClonePVC(ctx context.Context, namespace string, pvcName string, opts ClonePVCOptions) (*v1.PersistentVolumeClaim, error) {
	ret := _m.Called(ctx, namespace, pvcName, opts)

	if len(ret) == 0 {
		panic("no return value specified for ClonePVC")
	}

	var r0 *v1.PersistentVolumeClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ClonePVCOptions) (*v1.PersistentVolumeClaim, error)); ok {
		return rf(ctx, namespace, pvcName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ClonePVCOptions) *v1.PersistentVolumeClaim); ok {
		r0 = rf(ctx, namespace, pvcName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PersistentVolumeClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ClonePVCOptions) error); ok {
		r1 = rf(ctx, namespace, pvcName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_ClonePVC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClonePVC'
type MockClientInterface_ClonePVC_Call struct {
	*mock.Call
}

// ClonePVC is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - pvcName string
//   - opts ClonePVCOptions
func (_e *MockClientInterface_Expecter) ClonePVC(ctx interface{}, namespace interface{}, pvcName interface{}, opts interface{}) *MockClientInterface_ClonePVC_Call {
	return &MockClientInterface_ClonePVC_Call{Call: _e.mock.On("ClonePVC", ctx, namespace, pvcName, opts)}
}

func (_c *MockClientInterface_ClonePVC_Call) Run(run func(ctx context.Context, namespace string, pvcName string, opts ClonePVCOptions)) *MockClientInterface_ClonePVC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(ClonePVCOptions))
	})
	return _c
}

func (_c *MockClientInterface_ClonePVC_Call) Return(clonedPvc *v1.PersistentVolumeClaim, err error) *MockClientInterface_ClonePVC_Call {
	_c.Call.Return(clonedPvc, err)
	return _c
}

func (_c *MockClientInterface_ClonePVC_Call) RunAndReturn(run func(context.Context, string, string, ClonePVCOptions) (*v1.PersistentVolumeClaim, error)) *MockClientInterface_ClonePVC_Call {
	_c.Call.Return(run)
	return _c
}

// Core provides a mock function with no fields
func (_m *MockClientInterface) Core() core.ClientInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Core")
	}

	var r0 core.ClientInterface
	if rf, ok := ret.Get(0).(func() core.ClientInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.ClientInterface)
		}
	}

	return r0
}

// MockClientInterface_Core_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Core'
type MockClientInterface_Core_Call struct {
	*mock.Call
}

// Core is a helper method to define mock.On call
func (_e *MockClientInterface_Expecter) Core() *MockClientInterface_Core_Call {
	return &MockClientInterface_Core_Call{Call: _e.mock.On("Core")}
}

func (_c *MockClientInterface_Core_Call) Run(run func()) *MockClientInterface_Core_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientInterface_Core_Call) Return(_a0 core.ClientInterface) *MockClientInterface_Core_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_Core_Call) RunAndReturn(run func() core.ClientInterface) *MockClientInterface_Core_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackupToolInstance provides a mock function with given fields: ctx, namespace, instance, opts
func (_m *MockClientInterface) CreateBackupToolInstance(ctx context.Context, namespace string, instance string, opts CreateBackupToolInstanceOptions) (BackupToolInstanceInterface, error) {
	ret := _m.Called(ctx, namespace, instance, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupToolInstance")
	}

	var r0 BackupToolInstanceInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, CreateBackupToolInstanceOptions) (BackupToolInstanceInterface, error)); ok {
		return rf(ctx, namespace, instance, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, CreateBackupToolInstanceOptions) BackupToolInstanceInterface); ok {
		r0 = rf(ctx, namespace, instance, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BackupToolInstanceInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, CreateBackupToolInstanceOptions) error); ok {
		r1 = rf(ctx, namespace, instance, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateBackupToolInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackupToolInstance'
type MockClientInterface_CreateBackupToolInstance_Call struct {
	*mock.Call
}

// CreateBackupToolInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - instance string
//   - opts CreateBackupToolInstanceOptions
func (_e *MockClientInterface_Expecter) CreateBackupToolInstance(ctx interface{}, namespace interface{}, instance interface{}, opts interface{}) *MockClientInterface_CreateBackupToolInstance_Call {
	return &MockClientInterface_CreateBackupToolInstance_Call{Call: _e.mock.On("CreateBackupToolInstance", ctx, namespace, instance, opts)}
}

func (_c *MockClientInterface_CreateBackupToolInstance_Call) Run(run func(ctx context.Context, namespace string, instance string, opts CreateBackupToolInstanceOptions)) *MockClientInterface_CreateBackupToolInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(CreateBackupToolInstanceOptions))
	})
	return _c
}

func (_c *MockClientInterface_CreateBackupToolInstance_Call) Return(_a0 BackupToolInstanceInterface, _a1 error) *MockClientInterface_CreateBackupToolInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateBackupToolInstance_Call) RunAndReturn(run func(context.Context, string, string, CreateBackupToolInstanceOptions) (BackupToolInstanceInterface, error)) *MockClientInterface_CreateBackupToolInstance_Call {
	_c.Call.Return(run)
	return _c
}

// ES provides a mock function with no fields
func (_m *MockClientInterface) ES() externalsnapshotter.ClientInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ES")
	}

	var r0 externalsnapshotter.ClientInterface
	if rf, ok := ret.Get(0).(func() externalsnapshotter.ClientInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(externalsnapshotter.ClientInterface)
		}
	}

	return r0
}

// MockClientInterface_ES_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ES'
type MockClientInterface_ES_Call struct {
	*mock.Call
}

// ES is a helper method to define mock.On call
func (_e *MockClientInterface_Expecter) ES() *MockClientInterface_ES_Call {
	return &MockClientInterface_ES_Call{Call: _e.mock.On("ES")}
}

func (_c *MockClientInterface_ES_Call) Run(run func()) *MockClientInterface_ES_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientInterface_ES_Call) Return(_a0 externalsnapshotter.ClientInterface) *MockClientInterface_ES_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_ES_Call) RunAndReturn(run func() externalsnapshotter.ClientInterface) *MockClientInterface_ES_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
