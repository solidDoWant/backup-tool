// Code generated by mockery v2.51.0. DO NOT EDIT.

package kubecluster

import (
	context "context"

	clients "github.com/solidDoWant/backup-tool/pkg/grpc/clients"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// MockBackupToolInstanceInterface is an autogenerated mock type for the BackupToolInstanceInterface type
type MockBackupToolInstanceInterface struct {
	mock.Mock
}

type MockBackupToolInstanceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBackupToolInstanceInterface) EXPECT() *MockBackupToolInstanceInterface_Expecter {
	return &MockBackupToolInstanceInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx
func (_m *MockBackupToolInstanceInterface) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBackupToolInstanceInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBackupToolInstanceInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBackupToolInstanceInterface_Expecter) Delete(ctx interface{}) *MockBackupToolInstanceInterface_Delete_Call {
	return &MockBackupToolInstanceInterface_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *MockBackupToolInstanceInterface_Delete_Call) Run(run func(ctx context.Context)) *MockBackupToolInstanceInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBackupToolInstanceInterface_Delete_Call) Return(_a0 error) *MockBackupToolInstanceInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackupToolInstanceInterface_Delete_Call) RunAndReturn(run func(context.Context) error) *MockBackupToolInstanceInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetGRPCClient provides a mock function with given fields: ctx, searchDomains
func (_m *MockBackupToolInstanceInterface) GetGRPCClient(ctx context.Context, searchDomains ...string) (clients.ClientInterface, error) {
	_va := make([]interface{}, len(searchDomains))
	for _i := range searchDomains {
		_va[_i] = searchDomains[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGRPCClient")
	}

	var r0 clients.ClientInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (clients.ClientInterface, error)); ok {
		return rf(ctx, searchDomains...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) clients.ClientInterface); ok {
		r0 = rf(ctx, searchDomains...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clients.ClientInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, searchDomains...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBackupToolInstanceInterface_GetGRPCClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGRPCClient'
type MockBackupToolInstanceInterface_GetGRPCClient_Call struct {
	*mock.Call
}

// GetGRPCClient is a helper method to define mock.On call
//   - ctx context.Context
//   - searchDomains ...string
func (_e *MockBackupToolInstanceInterface_Expecter) GetGRPCClient(ctx interface{}, searchDomains ...interface{}) *MockBackupToolInstanceInterface_GetGRPCClient_Call {
	return &MockBackupToolInstanceInterface_GetGRPCClient_Call{Call: _e.mock.On("GetGRPCClient",
		append([]interface{}{ctx}, searchDomains...)...)}
}

func (_c *MockBackupToolInstanceInterface_GetGRPCClient_Call) Run(run func(ctx context.Context, searchDomains ...string)) *MockBackupToolInstanceInterface_GetGRPCClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockBackupToolInstanceInterface_GetGRPCClient_Call) Return(_a0 clients.ClientInterface, _a1 error) *MockBackupToolInstanceInterface_GetGRPCClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackupToolInstanceInterface_GetGRPCClient_Call) RunAndReturn(run func(context.Context, ...string) (clients.ClientInterface, error)) *MockBackupToolInstanceInterface_GetGRPCClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetPod provides a mock function with no fields
func (_m *MockBackupToolInstanceInterface) GetPod() *v1.Pod {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPod")
	}

	var r0 *v1.Pod
	if rf, ok := ret.Get(0).(func() *v1.Pod); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	return r0
}

// MockBackupToolInstanceInterface_GetPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPod'
type MockBackupToolInstanceInterface_GetPod_Call struct {
	*mock.Call
}

// GetPod is a helper method to define mock.On call
func (_e *MockBackupToolInstanceInterface_Expecter) GetPod() *MockBackupToolInstanceInterface_GetPod_Call {
	return &MockBackupToolInstanceInterface_GetPod_Call{Call: _e.mock.On("GetPod")}
}

func (_c *MockBackupToolInstanceInterface_GetPod_Call) Run(run func()) *MockBackupToolInstanceInterface_GetPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBackupToolInstanceInterface_GetPod_Call) Return(_a0 *v1.Pod) *MockBackupToolInstanceInterface_GetPod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackupToolInstanceInterface_GetPod_Call) RunAndReturn(run func() *v1.Pod) *MockBackupToolInstanceInterface_GetPod_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with no fields
func (_m *MockBackupToolInstanceInterface) GetService() *v1.Service {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *v1.Service
	if rf, ok := ret.Get(0).(func() *v1.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Service)
		}
	}

	return r0
}

// MockBackupToolInstanceInterface_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockBackupToolInstanceInterface_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
func (_e *MockBackupToolInstanceInterface_Expecter) GetService() *MockBackupToolInstanceInterface_GetService_Call {
	return &MockBackupToolInstanceInterface_GetService_Call{Call: _e.mock.On("GetService")}
}

func (_c *MockBackupToolInstanceInterface_GetService_Call) Run(run func()) *MockBackupToolInstanceInterface_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBackupToolInstanceInterface_GetService_Call) Return(_a0 *v1.Service) *MockBackupToolInstanceInterface_GetService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackupToolInstanceInterface_GetService_Call) RunAndReturn(run func() *v1.Service) *MockBackupToolInstanceInterface_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// setPod provides a mock function with given fields: pod
func (_m *MockBackupToolInstanceInterface) setPod(pod *v1.Pod) {
	_m.Called(pod)
}

// MockBackupToolInstanceInterface_setPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setPod'
type MockBackupToolInstanceInterface_setPod_Call struct {
	*mock.Call
}

// setPod is a helper method to define mock.On call
//   - pod *v1.Pod
func (_e *MockBackupToolInstanceInterface_Expecter) setPod(pod interface{}) *MockBackupToolInstanceInterface_setPod_Call {
	return &MockBackupToolInstanceInterface_setPod_Call{Call: _e.mock.On("setPod", pod)}
}

func (_c *MockBackupToolInstanceInterface_setPod_Call) Run(run func(pod *v1.Pod)) *MockBackupToolInstanceInterface_setPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Pod))
	})
	return _c
}

func (_c *MockBackupToolInstanceInterface_setPod_Call) Return() *MockBackupToolInstanceInterface_setPod_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBackupToolInstanceInterface_setPod_Call) RunAndReturn(run func(*v1.Pod)) *MockBackupToolInstanceInterface_setPod_Call {
	_c.Run(run)
	return _c
}

// setService provides a mock function with given fields: service
func (_m *MockBackupToolInstanceInterface) setService(service *v1.Service) {
	_m.Called(service)
}

// MockBackupToolInstanceInterface_setService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setService'
type MockBackupToolInstanceInterface_setService_Call struct {
	*mock.Call
}

// setService is a helper method to define mock.On call
//   - service *v1.Service
func (_e *MockBackupToolInstanceInterface_Expecter) setService(service interface{}) *MockBackupToolInstanceInterface_setService_Call {
	return &MockBackupToolInstanceInterface_setService_Call{Call: _e.mock.On("setService", service)}
}

func (_c *MockBackupToolInstanceInterface_setService_Call) Run(run func(service *v1.Service)) *MockBackupToolInstanceInterface_setService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Service))
	})
	return _c
}

func (_c *MockBackupToolInstanceInterface_setService_Call) Return() *MockBackupToolInstanceInterface_setService_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBackupToolInstanceInterface_setService_Call) RunAndReturn(run func(*v1.Service)) *MockBackupToolInstanceInterface_setService_Call {
	_c.Run(run)
	return _c
}

// NewMockBackupToolInstanceInterface creates a new instance of MockBackupToolInstanceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBackupToolInstanceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBackupToolInstanceInterface {
	mock := &MockBackupToolInstanceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
