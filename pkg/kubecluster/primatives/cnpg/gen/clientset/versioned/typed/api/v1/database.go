// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	apiv1 "github.com/cloudnative-pg/cloudnative-pg/api/v1"
	scheme "github.com/solidDoWant/backup-tool/pkg/kubecluster/primatives/cnpg/gen/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// DatabasesGetter has a method to return a DatabaseInterface.
// A group's client should implement this interface.
type DatabasesGetter interface {
	Databases(namespace string) DatabaseInterface
}

// DatabaseInterface has methods to work with Database resources.
type DatabaseInterface interface {
	Create(ctx context.Context, database *apiv1.Database, opts metav1.CreateOptions) (*apiv1.Database, error)
	Update(ctx context.Context, database *apiv1.Database, opts metav1.UpdateOptions) (*apiv1.Database, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, database *apiv1.Database, opts metav1.UpdateOptions) (*apiv1.Database, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*apiv1.Database, error)
	List(ctx context.Context, opts metav1.ListOptions) (*apiv1.DatabaseList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *apiv1.Database, err error)
	DatabaseExpansion
}

// databases implements DatabaseInterface
type databases struct {
	*gentype.ClientWithList[*apiv1.Database, *apiv1.DatabaseList]
}

// newDatabases returns a Databases
func newDatabases(c *PostgresqlV1Client, namespace string) *databases {
	return &databases{
		gentype.NewClientWithList[*apiv1.Database, *apiv1.DatabaseList](
			"databases",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apiv1.Database { return &apiv1.Database{} },
			func() *apiv1.DatabaseList { return &apiv1.DatabaseList{} },
		),
	}
}
