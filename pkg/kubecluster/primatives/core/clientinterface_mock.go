// Code generated by mockery v2.51.0. DO NOT EDIT.

package core

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	resource "k8s.io/apimachinery/pkg/api/resource"

	v1 "k8s.io/api/core/v1"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreatePVC provides a mock function with given fields: ctx, namespace, pvcName, size, opts
func (_m *MockClientInterface) CreatePVC(ctx context.Context, namespace string, pvcName string, size resource.Quantity, opts CreatePVCOptions) (*v1.PersistentVolumeClaim, error) {
	ret := _m.Called(ctx, namespace, pvcName, size, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreatePVC")
	}

	var r0 *v1.PersistentVolumeClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, resource.Quantity, CreatePVCOptions) (*v1.PersistentVolumeClaim, error)); ok {
		return rf(ctx, namespace, pvcName, size, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, resource.Quantity, CreatePVCOptions) *v1.PersistentVolumeClaim); ok {
		r0 = rf(ctx, namespace, pvcName, size, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PersistentVolumeClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, resource.Quantity, CreatePVCOptions) error); ok {
		r1 = rf(ctx, namespace, pvcName, size, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreatePVC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePVC'
type MockClientInterface_CreatePVC_Call struct {
	*mock.Call
}

// CreatePVC is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - pvcName string
//   - size resource.Quantity
//   - opts CreatePVCOptions
func (_e *MockClientInterface_Expecter) CreatePVC(ctx interface{}, namespace interface{}, pvcName interface{}, size interface{}, opts interface{}) *MockClientInterface_CreatePVC_Call {
	return &MockClientInterface_CreatePVC_Call{Call: _e.mock.On("CreatePVC", ctx, namespace, pvcName, size, opts)}
}

func (_c *MockClientInterface_CreatePVC_Call) Run(run func(ctx context.Context, namespace string, pvcName string, size resource.Quantity, opts CreatePVCOptions)) *MockClientInterface_CreatePVC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(resource.Quantity), args[4].(CreatePVCOptions))
	})
	return _c
}

func (_c *MockClientInterface_CreatePVC_Call) Return(_a0 *v1.PersistentVolumeClaim, _a1 error) *MockClientInterface_CreatePVC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreatePVC_Call) RunAndReturn(run func(context.Context, string, string, resource.Quantity, CreatePVCOptions) (*v1.PersistentVolumeClaim, error)) *MockClientInterface_CreatePVC_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePod provides a mock function with given fields: ctx, namespace, pod
func (_m *MockClientInterface) CreatePod(ctx context.Context, namespace string, pod *v1.Pod) (*v1.Pod, error) {
	ret := _m.Called(ctx, namespace, pod)

	if len(ret) == 0 {
		panic("no return value specified for CreatePod")
	}

	var r0 *v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Pod) (*v1.Pod, error)); ok {
		return rf(ctx, namespace, pod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Pod) *v1.Pod); ok {
		r0 = rf(ctx, namespace, pod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Pod) error); ok {
		r1 = rf(ctx, namespace, pod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreatePod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePod'
type MockClientInterface_CreatePod_Call struct {
	*mock.Call
}

// CreatePod is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - pod *v1.Pod
func (_e *MockClientInterface_Expecter) CreatePod(ctx interface{}, namespace interface{}, pod interface{}) *MockClientInterface_CreatePod_Call {
	return &MockClientInterface_CreatePod_Call{Call: _e.mock.On("CreatePod", ctx, namespace, pod)}
}

func (_c *MockClientInterface_CreatePod_Call) Run(run func(ctx context.Context, namespace string, pod *v1.Pod)) *MockClientInterface_CreatePod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*v1.Pod))
	})
	return _c
}

func (_c *MockClientInterface_CreatePod_Call) Return(_a0 *v1.Pod, _a1 error) *MockClientInterface_CreatePod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreatePod_Call) RunAndReturn(run func(context.Context, string, *v1.Pod) (*v1.Pod, error)) *MockClientInterface_CreatePod_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: ctx, namespce, service
func (_m *MockClientInterface) CreateService(ctx context.Context, namespce string, service *v1.Service) (*v1.Service, error) {
	ret := _m.Called(ctx, namespce, service)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *v1.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Service) (*v1.Service, error)); ok {
		return rf(ctx, namespce, service)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Service) *v1.Service); ok {
		r0 = rf(ctx, namespce, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Service) error); ok {
		r1 = rf(ctx, namespce, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockClientInterface_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - ctx context.Context
//   - namespce string
//   - service *v1.Service
func (_e *MockClientInterface_Expecter) CreateService(ctx interface{}, namespce interface{}, service interface{}) *MockClientInterface_CreateService_Call {
	return &MockClientInterface_CreateService_Call{Call: _e.mock.On("CreateService", ctx, namespce, service)}
}

func (_c *MockClientInterface_CreateService_Call) Run(run func(ctx context.Context, namespce string, service *v1.Service)) *MockClientInterface_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*v1.Service))
	})
	return _c
}

func (_c *MockClientInterface_CreateService_Call) Return(_a0 *v1.Service, _a1 error) *MockClientInterface_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateService_Call) RunAndReturn(run func(context.Context, string, *v1.Service) (*v1.Service, error)) *MockClientInterface_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePod provides a mock function with given fields: ctx, namespace, name
func (_m *MockClientInterface) DeletePod(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeletePod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeletePod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePod'
type MockClientInterface_DeletePod_Call struct {
	*mock.Call
}

// DeletePod is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockClientInterface_Expecter) DeletePod(ctx interface{}, namespace interface{}, name interface{}) *MockClientInterface_DeletePod_Call {
	return &MockClientInterface_DeletePod_Call{Call: _e.mock.On("DeletePod", ctx, namespace, name)}
}

func (_c *MockClientInterface_DeletePod_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockClientInterface_DeletePod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeletePod_Call) Return(_a0 error) *MockClientInterface_DeletePod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeletePod_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_DeletePod_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: ctx, namespace, name
func (_m *MockClientInterface) DeleteService(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type MockClientInterface_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockClientInterface_Expecter) DeleteService(ctx interface{}, namespace interface{}, name interface{}) *MockClientInterface_DeleteService_Call {
	return &MockClientInterface_DeleteService_Call{Call: _e.mock.On("DeleteService", ctx, namespace, name)}
}

func (_c *MockClientInterface_DeleteService_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockClientInterface_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteService_Call) Return(_a0 error) *MockClientInterface_DeleteService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteService_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVolume provides a mock function with given fields: ctx, namespace, volumeName
func (_m *MockClientInterface) DeleteVolume(ctx context.Context, namespace string, volumeName string) error {
	ret := _m.Called(ctx, namespace, volumeName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, volumeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVolume'
type MockClientInterface_DeleteVolume_Call struct {
	*mock.Call
}

// DeleteVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - volumeName string
func (_e *MockClientInterface_Expecter) DeleteVolume(ctx interface{}, namespace interface{}, volumeName interface{}) *MockClientInterface_DeleteVolume_Call {
	return &MockClientInterface_DeleteVolume_Call{Call: _e.mock.On("DeleteVolume", ctx, namespace, volumeName)}
}

func (_c *MockClientInterface_DeleteVolume_Call) Run(run func(ctx context.Context, namespace string, volumeName string)) *MockClientInterface_DeleteVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteVolume_Call) Return(_a0 error) *MockClientInterface_DeleteVolume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteVolume_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_DeleteVolume_Call {
	_c.Call.Return(run)
	return _c
}

// DoesPVCExist provides a mock function with given fields: ctx, namespace, name
func (_m *MockClientInterface) DoesPVCExist(ctx context.Context, namespace string, name string) (bool, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DoesPVCExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DoesPVCExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoesPVCExist'
type MockClientInterface_DoesPVCExist_Call struct {
	*mock.Call
}

// DoesPVCExist is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockClientInterface_Expecter) DoesPVCExist(ctx interface{}, namespace interface{}, name interface{}) *MockClientInterface_DoesPVCExist_Call {
	return &MockClientInterface_DoesPVCExist_Call{Call: _e.mock.On("DoesPVCExist", ctx, namespace, name)}
}

func (_c *MockClientInterface_DoesPVCExist_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockClientInterface_DoesPVCExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_DoesPVCExist_Call) Return(_a0 bool, _a1 error) *MockClientInterface_DoesPVCExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DoesPVCExist_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockClientInterface_DoesPVCExist_Call {
	_c.Call.Return(run)
	return _c
}

// EnsurePVCExists provides a mock function with given fields: ctx, namespace, pvcName, size, opts
func (_m *MockClientInterface) EnsurePVCExists(ctx context.Context, namespace string, pvcName string, size resource.Quantity, opts CreatePVCOptions) (*v1.PersistentVolumeClaim, error) {
	ret := _m.Called(ctx, namespace, pvcName, size, opts)

	if len(ret) == 0 {
		panic("no return value specified for EnsurePVCExists")
	}

	var r0 *v1.PersistentVolumeClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, resource.Quantity, CreatePVCOptions) (*v1.PersistentVolumeClaim, error)); ok {
		return rf(ctx, namespace, pvcName, size, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, resource.Quantity, CreatePVCOptions) *v1.PersistentVolumeClaim); ok {
		r0 = rf(ctx, namespace, pvcName, size, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PersistentVolumeClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, resource.Quantity, CreatePVCOptions) error); ok {
		r1 = rf(ctx, namespace, pvcName, size, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_EnsurePVCExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsurePVCExists'
type MockClientInterface_EnsurePVCExists_Call struct {
	*mock.Call
}

// EnsurePVCExists is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - pvcName string
//   - size resource.Quantity
//   - opts CreatePVCOptions
func (_e *MockClientInterface_Expecter) EnsurePVCExists(ctx interface{}, namespace interface{}, pvcName interface{}, size interface{}, opts interface{}) *MockClientInterface_EnsurePVCExists_Call {
	return &MockClientInterface_EnsurePVCExists_Call{Call: _e.mock.On("EnsurePVCExists", ctx, namespace, pvcName, size, opts)}
}

func (_c *MockClientInterface_EnsurePVCExists_Call) Run(run func(ctx context.Context, namespace string, pvcName string, size resource.Quantity, opts CreatePVCOptions)) *MockClientInterface_EnsurePVCExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(resource.Quantity), args[4].(CreatePVCOptions))
	})
	return _c
}

func (_c *MockClientInterface_EnsurePVCExists_Call) Return(_a0 *v1.PersistentVolumeClaim, _a1 error) *MockClientInterface_EnsurePVCExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_EnsurePVCExists_Call) RunAndReturn(run func(context.Context, string, string, resource.Quantity, CreatePVCOptions) (*v1.PersistentVolumeClaim, error)) *MockClientInterface_EnsurePVCExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetEndpoint provides a mock function with given fields: ctx, namespace, name
func (_m *MockClientInterface) GetEndpoint(ctx context.Context, namespace string, name string) (*v1.Endpoints, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetEndpoint")
	}

	var r0 *v1.Endpoints
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.Endpoints, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Endpoints); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Endpoints)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEndpoint'
type MockClientInterface_GetEndpoint_Call struct {
	*mock.Call
}

// GetEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockClientInterface_Expecter) GetEndpoint(ctx interface{}, namespace interface{}, name interface{}) *MockClientInterface_GetEndpoint_Call {
	return &MockClientInterface_GetEndpoint_Call{Call: _e.mock.On("GetEndpoint", ctx, namespace, name)}
}

func (_c *MockClientInterface_GetEndpoint_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockClientInterface_GetEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetEndpoint_Call) Return(_a0 *v1.Endpoints, _a1 error) *MockClientInterface_GetEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetEndpoint_Call) RunAndReturn(run func(context.Context, string, string) (*v1.Endpoints, error)) *MockClientInterface_GetEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// GetPVC provides a mock function with given fields: ctx, namespace, name
func (_m *MockClientInterface) GetPVC(ctx context.Context, namespace string, name string) (*v1.PersistentVolumeClaim, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPVC")
	}

	var r0 *v1.PersistentVolumeClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.PersistentVolumeClaim, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.PersistentVolumeClaim); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PersistentVolumeClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetPVC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPVC'
type MockClientInterface_GetPVC_Call struct {
	*mock.Call
}

// GetPVC is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockClientInterface_Expecter) GetPVC(ctx interface{}, namespace interface{}, name interface{}) *MockClientInterface_GetPVC_Call {
	return &MockClientInterface_GetPVC_Call{Call: _e.mock.On("GetPVC", ctx, namespace, name)}
}

func (_c *MockClientInterface_GetPVC_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockClientInterface_GetPVC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetPVC_Call) Return(_a0 *v1.PersistentVolumeClaim, _a1 error) *MockClientInterface_GetPVC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetPVC_Call) RunAndReturn(run func(context.Context, string, string) (*v1.PersistentVolumeClaim, error)) *MockClientInterface_GetPVC_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForReadyEndpoint provides a mock function with given fields: ctx, namespace, name, opts
func (_m *MockClientInterface) WaitForReadyEndpoint(ctx context.Context, namespace string, name string, opts WaitForReadyEndpointOpts) error {
	ret := _m.Called(ctx, namespace, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for WaitForReadyEndpoint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, WaitForReadyEndpointOpts) error); ok {
		r0 = rf(ctx, namespace, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_WaitForReadyEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForReadyEndpoint'
type MockClientInterface_WaitForReadyEndpoint_Call struct {
	*mock.Call
}

// WaitForReadyEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - opts WaitForReadyEndpointOpts
func (_e *MockClientInterface_Expecter) WaitForReadyEndpoint(ctx interface{}, namespace interface{}, name interface{}, opts interface{}) *MockClientInterface_WaitForReadyEndpoint_Call {
	return &MockClientInterface_WaitForReadyEndpoint_Call{Call: _e.mock.On("WaitForReadyEndpoint", ctx, namespace, name, opts)}
}

func (_c *MockClientInterface_WaitForReadyEndpoint_Call) Run(run func(ctx context.Context, namespace string, name string, opts WaitForReadyEndpointOpts)) *MockClientInterface_WaitForReadyEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(WaitForReadyEndpointOpts))
	})
	return _c
}

func (_c *MockClientInterface_WaitForReadyEndpoint_Call) Return(_a0 error) *MockClientInterface_WaitForReadyEndpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_WaitForReadyEndpoint_Call) RunAndReturn(run func(context.Context, string, string, WaitForReadyEndpointOpts) error) *MockClientInterface_WaitForReadyEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForReadyPod provides a mock function with given fields: ctx, namespace, name, opts
func (_m *MockClientInterface) WaitForReadyPod(ctx context.Context, namespace string, name string, opts WaitForReadyPodOpts) error {
	ret := _m.Called(ctx, namespace, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for WaitForReadyPod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, WaitForReadyPodOpts) error); ok {
		r0 = rf(ctx, namespace, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_WaitForReadyPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForReadyPod'
type MockClientInterface_WaitForReadyPod_Call struct {
	*mock.Call
}

// WaitForReadyPod is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - opts WaitForReadyPodOpts
func (_e *MockClientInterface_Expecter) WaitForReadyPod(ctx interface{}, namespace interface{}, name interface{}, opts interface{}) *MockClientInterface_WaitForReadyPod_Call {
	return &MockClientInterface_WaitForReadyPod_Call{Call: _e.mock.On("WaitForReadyPod", ctx, namespace, name, opts)}
}

func (_c *MockClientInterface_WaitForReadyPod_Call) Run(run func(ctx context.Context, namespace string, name string, opts WaitForReadyPodOpts)) *MockClientInterface_WaitForReadyPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(WaitForReadyPodOpts))
	})
	return _c
}

func (_c *MockClientInterface_WaitForReadyPod_Call) Return(_a0 error) *MockClientInterface_WaitForReadyPod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_WaitForReadyPod_Call) RunAndReturn(run func(context.Context, string, string, WaitForReadyPodOpts) error) *MockClientInterface_WaitForReadyPod_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForReadyService provides a mock function with given fields: ctx, namespace, name, opts
func (_m *MockClientInterface) WaitForReadyService(ctx context.Context, namespace string, name string, opts WaitForReadyServiceOpts) error {
	ret := _m.Called(ctx, namespace, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for WaitForReadyService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, WaitForReadyServiceOpts) error); ok {
		r0 = rf(ctx, namespace, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_WaitForReadyService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForReadyService'
type MockClientInterface_WaitForReadyService_Call struct {
	*mock.Call
}

// WaitForReadyService is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - opts WaitForReadyServiceOpts
func (_e *MockClientInterface_Expecter) WaitForReadyService(ctx interface{}, namespace interface{}, name interface{}, opts interface{}) *MockClientInterface_WaitForReadyService_Call {
	return &MockClientInterface_WaitForReadyService_Call{Call: _e.mock.On("WaitForReadyService", ctx, namespace, name, opts)}
}

func (_c *MockClientInterface_WaitForReadyService_Call) Run(run func(ctx context.Context, namespace string, name string, opts WaitForReadyServiceOpts)) *MockClientInterface_WaitForReadyService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(WaitForReadyServiceOpts))
	})
	return _c
}

func (_c *MockClientInterface_WaitForReadyService_Call) Return(_a0 error) *MockClientInterface_WaitForReadyService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_WaitForReadyService_Call) RunAndReturn(run func(context.Context, string, string, WaitForReadyServiceOpts) error) *MockClientInterface_WaitForReadyService_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
