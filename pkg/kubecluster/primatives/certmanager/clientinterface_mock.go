// Code generated by mockery v2.51.0. DO NOT EDIT.

package certmanager

import (
	context "context"

	v1 "github.com/cert-manager/cert-manager/pkg/apis/certmanager/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateCertificate provides a mock function with given fields: ctx, name, namespace, issuerName, opts
func (_m *MockClientInterface) CreateCertificate(ctx context.Context, name string, namespace string, issuerName string, opts CreateCertificateOptions) (*v1.Certificate, error) {
	ret := _m.Called(ctx, name, namespace, issuerName, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificate")
	}

	var r0 *v1.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, CreateCertificateOptions) (*v1.Certificate, error)); ok {
		return rf(ctx, name, namespace, issuerName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, CreateCertificateOptions) *v1.Certificate); ok {
		r0 = rf(ctx, name, namespace, issuerName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, CreateCertificateOptions) error); ok {
		r1 = rf(ctx, name, namespace, issuerName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCertificate'
type MockClientInterface_CreateCertificate_Call struct {
	*mock.Call
}

// CreateCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
//   - issuerName string
//   - opts CreateCertificateOptions
func (_e *MockClientInterface_Expecter) CreateCertificate(ctx interface{}, name interface{}, namespace interface{}, issuerName interface{}, opts interface{}) *MockClientInterface_CreateCertificate_Call {
	return &MockClientInterface_CreateCertificate_Call{Call: _e.mock.On("CreateCertificate", ctx, name, namespace, issuerName, opts)}
}

func (_c *MockClientInterface_CreateCertificate_Call) Run(run func(ctx context.Context, name string, namespace string, issuerName string, opts CreateCertificateOptions)) *MockClientInterface_CreateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(CreateCertificateOptions))
	})
	return _c
}

func (_c *MockClientInterface_CreateCertificate_Call) Return(_a0 *v1.Certificate, _a1 error) *MockClientInterface_CreateCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateCertificate_Call) RunAndReturn(run func(context.Context, string, string, string, CreateCertificateOptions) (*v1.Certificate, error)) *MockClientInterface_CreateCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCertificate provides a mock function with given fields: ctx, name, namespace
func (_m *MockClientInterface) DeleteCertificate(ctx context.Context, name string, namespace string) error {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificate'
type MockClientInterface_DeleteCertificate_Call struct {
	*mock.Call
}

// DeleteCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *MockClientInterface_Expecter) DeleteCertificate(ctx interface{}, name interface{}, namespace interface{}) *MockClientInterface_DeleteCertificate_Call {
	return &MockClientInterface_DeleteCertificate_Call{Call: _e.mock.On("DeleteCertificate", ctx, name, namespace)}
}

func (_c *MockClientInterface_DeleteCertificate_Call) Run(run func(ctx context.Context, name string, namespace string)) *MockClientInterface_DeleteCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteCertificate_Call) Return(_a0 error) *MockClientInterface_DeleteCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteCertificate_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_DeleteCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForReadyCertificate provides a mock function with given fields: ctx, namespace, name, opts
func (_m *MockClientInterface) WaitForReadyCertificate(ctx context.Context, namespace string, name string, opts WaitForReadyCertificateOpts) (*v1.Certificate, error) {
	ret := _m.Called(ctx, namespace, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for WaitForReadyCertificate")
	}

	var r0 *v1.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, WaitForReadyCertificateOpts) (*v1.Certificate, error)); ok {
		return rf(ctx, namespace, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, WaitForReadyCertificateOpts) *v1.Certificate); ok {
		r0 = rf(ctx, namespace, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, WaitForReadyCertificateOpts) error); ok {
		r1 = rf(ctx, namespace, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_WaitForReadyCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForReadyCertificate'
type MockClientInterface_WaitForReadyCertificate_Call struct {
	*mock.Call
}

// WaitForReadyCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - opts WaitForReadyCertificateOpts
func (_e *MockClientInterface_Expecter) WaitForReadyCertificate(ctx interface{}, namespace interface{}, name interface{}, opts interface{}) *MockClientInterface_WaitForReadyCertificate_Call {
	return &MockClientInterface_WaitForReadyCertificate_Call{Call: _e.mock.On("WaitForReadyCertificate", ctx, namespace, name, opts)}
}

func (_c *MockClientInterface_WaitForReadyCertificate_Call) Run(run func(ctx context.Context, namespace string, name string, opts WaitForReadyCertificateOpts)) *MockClientInterface_WaitForReadyCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(WaitForReadyCertificateOpts))
	})
	return _c
}

func (_c *MockClientInterface_WaitForReadyCertificate_Call) Return(_a0 *v1.Certificate, _a1 error) *MockClientInterface_WaitForReadyCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_WaitForReadyCertificate_Call) RunAndReturn(run func(context.Context, string, string, WaitForReadyCertificateOpts) (*v1.Certificate, error)) *MockClientInterface_WaitForReadyCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
