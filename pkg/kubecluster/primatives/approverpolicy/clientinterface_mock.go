// Code generated by mockery v2.51.0. DO NOT EDIT.

package approverpolicy

import (
	contexts "github.com/solidDoWant/backup-tool/pkg/contexts"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/cert-manager/approver-policy/pkg/apis/policy/v1alpha1"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// CreateCertificateRequestPolicy provides a mock function with given fields: ctx, name, spec, opts
func (_m *MockClientInterface) CreateCertificateRequestPolicy(ctx *contexts.Context, name string, spec v1alpha1.CertificateRequestPolicySpec, opts CreateCertificateRequestPolicyOptions) (*v1alpha1.CertificateRequestPolicy, error) {
	ret := _m.Called(ctx, name, spec, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificateRequestPolicy")
	}

	var r0 *v1alpha1.CertificateRequestPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(*contexts.Context, string, v1alpha1.CertificateRequestPolicySpec, CreateCertificateRequestPolicyOptions) (*v1alpha1.CertificateRequestPolicy, error)); ok {
		return rf(ctx, name, spec, opts)
	}
	if rf, ok := ret.Get(0).(func(*contexts.Context, string, v1alpha1.CertificateRequestPolicySpec, CreateCertificateRequestPolicyOptions) *v1alpha1.CertificateRequestPolicy); ok {
		r0 = rf(ctx, name, spec, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CertificateRequestPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(*contexts.Context, string, v1alpha1.CertificateRequestPolicySpec, CreateCertificateRequestPolicyOptions) error); ok {
		r1 = rf(ctx, name, spec, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateCertificateRequestPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCertificateRequestPolicy'
type MockClientInterface_CreateCertificateRequestPolicy_Call struct {
	*mock.Call
}

// CreateCertificateRequestPolicy is a helper method to define mock.On call
//   - ctx *contexts.Context
//   - name string
//   - spec v1alpha1.CertificateRequestPolicySpec
//   - opts CreateCertificateRequestPolicyOptions
func (_e *MockClientInterface_Expecter) CreateCertificateRequestPolicy(ctx interface{}, name interface{}, spec interface{}, opts interface{}) *MockClientInterface_CreateCertificateRequestPolicy_Call {
	return &MockClientInterface_CreateCertificateRequestPolicy_Call{Call: _e.mock.On("CreateCertificateRequestPolicy", ctx, name, spec, opts)}
}

func (_c *MockClientInterface_CreateCertificateRequestPolicy_Call) Run(run func(ctx *contexts.Context, name string, spec v1alpha1.CertificateRequestPolicySpec, opts CreateCertificateRequestPolicyOptions)) *MockClientInterface_CreateCertificateRequestPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context), args[1].(string), args[2].(v1alpha1.CertificateRequestPolicySpec), args[3].(CreateCertificateRequestPolicyOptions))
	})
	return _c
}

func (_c *MockClientInterface_CreateCertificateRequestPolicy_Call) Return(_a0 *v1alpha1.CertificateRequestPolicy, _a1 error) *MockClientInterface_CreateCertificateRequestPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateCertificateRequestPolicy_Call) RunAndReturn(run func(*contexts.Context, string, v1alpha1.CertificateRequestPolicySpec, CreateCertificateRequestPolicyOptions) (*v1alpha1.CertificateRequestPolicy, error)) *MockClientInterface_CreateCertificateRequestPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCertificateRequestPolicy provides a mock function with given fields: ctx, name
func (_m *MockClientInterface) DeleteCertificateRequestPolicy(ctx *contexts.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificateRequestPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteCertificateRequestPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificateRequestPolicy'
type MockClientInterface_DeleteCertificateRequestPolicy_Call struct {
	*mock.Call
}

// DeleteCertificateRequestPolicy is a helper method to define mock.On call
//   - ctx *contexts.Context
//   - name string
func (_e *MockClientInterface_Expecter) DeleteCertificateRequestPolicy(ctx interface{}, name interface{}) *MockClientInterface_DeleteCertificateRequestPolicy_Call {
	return &MockClientInterface_DeleteCertificateRequestPolicy_Call{Call: _e.mock.On("DeleteCertificateRequestPolicy", ctx, name)}
}

func (_c *MockClientInterface_DeleteCertificateRequestPolicy_Call) Run(run func(ctx *contexts.Context, name string)) *MockClientInterface_DeleteCertificateRequestPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteCertificateRequestPolicy_Call) Return(_a0 error) *MockClientInterface_DeleteCertificateRequestPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteCertificateRequestPolicy_Call) RunAndReturn(run func(*contexts.Context, string) error) *MockClientInterface_DeleteCertificateRequestPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForReadyCertificateRequestPolicy provides a mock function with given fields: ctx, name, opts
func (_m *MockClientInterface) WaitForReadyCertificateRequestPolicy(ctx *contexts.Context, name string, opts WaitForReadyCertificateRequestPolicyOpts) (*v1alpha1.CertificateRequestPolicy, error) {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for WaitForReadyCertificateRequestPolicy")
	}

	var r0 *v1alpha1.CertificateRequestPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(*contexts.Context, string, WaitForReadyCertificateRequestPolicyOpts) (*v1alpha1.CertificateRequestPolicy, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(*contexts.Context, string, WaitForReadyCertificateRequestPolicyOpts) *v1alpha1.CertificateRequestPolicy); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CertificateRequestPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(*contexts.Context, string, WaitForReadyCertificateRequestPolicyOpts) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_WaitForReadyCertificateRequestPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForReadyCertificateRequestPolicy'
type MockClientInterface_WaitForReadyCertificateRequestPolicy_Call struct {
	*mock.Call
}

// WaitForReadyCertificateRequestPolicy is a helper method to define mock.On call
//   - ctx *contexts.Context
//   - name string
//   - opts WaitForReadyCertificateRequestPolicyOpts
func (_e *MockClientInterface_Expecter) WaitForReadyCertificateRequestPolicy(ctx interface{}, name interface{}, opts interface{}) *MockClientInterface_WaitForReadyCertificateRequestPolicy_Call {
	return &MockClientInterface_WaitForReadyCertificateRequestPolicy_Call{Call: _e.mock.On("WaitForReadyCertificateRequestPolicy", ctx, name, opts)}
}

func (_c *MockClientInterface_WaitForReadyCertificateRequestPolicy_Call) Run(run func(ctx *contexts.Context, name string, opts WaitForReadyCertificateRequestPolicyOpts)) *MockClientInterface_WaitForReadyCertificateRequestPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context), args[1].(string), args[2].(WaitForReadyCertificateRequestPolicyOpts))
	})
	return _c
}

func (_c *MockClientInterface_WaitForReadyCertificateRequestPolicy_Call) Return(_a0 *v1alpha1.CertificateRequestPolicy, _a1 error) *MockClientInterface_WaitForReadyCertificateRequestPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_WaitForReadyCertificateRequestPolicy_Call) RunAndReturn(run func(*contexts.Context, string, WaitForReadyCertificateRequestPolicyOpts) (*v1alpha1.CertificateRequestPolicy, error)) *MockClientInterface_WaitForReadyCertificateRequestPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
