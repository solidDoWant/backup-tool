// Code generated by mockery v2.51.0. DO NOT EDIT.

package drvolume

import (
	contexts "github.com/solidDoWant/backup-tool/pkg/contexts"
	mock "github.com/stretchr/testify/mock"

	resource "k8s.io/apimachinery/pkg/api/resource"
)

// MockProviderInterface is an autogenerated mock type for the ProviderInterface type
type MockProviderInterface struct {
	mock.Mock
}

type MockProviderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderInterface) EXPECT() *MockProviderInterface_Expecter {
	return &MockProviderInterface_Expecter{mock: &_m.Mock}
}

// NewDRVolume provides a mock function with given fields: ctx, namespace, name, configuredSize, opts
func (_m *MockProviderInterface) NewDRVolume(ctx *contexts.Context, namespace string, name string, configuredSize resource.Quantity, opts DRVolumeCreateOptions) (DRVolumeInterface, error) {
	ret := _m.Called(ctx, namespace, name, configuredSize, opts)

	if len(ret) == 0 {
		panic("no return value specified for NewDRVolume")
	}

	var r0 DRVolumeInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(*contexts.Context, string, string, resource.Quantity, DRVolumeCreateOptions) (DRVolumeInterface, error)); ok {
		return rf(ctx, namespace, name, configuredSize, opts)
	}
	if rf, ok := ret.Get(0).(func(*contexts.Context, string, string, resource.Quantity, DRVolumeCreateOptions) DRVolumeInterface); ok {
		r0 = rf(ctx, namespace, name, configuredSize, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DRVolumeInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(*contexts.Context, string, string, resource.Quantity, DRVolumeCreateOptions) error); ok {
		r1 = rf(ctx, namespace, name, configuredSize, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderInterface_NewDRVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDRVolume'
type MockProviderInterface_NewDRVolume_Call struct {
	*mock.Call
}

// NewDRVolume is a helper method to define mock.On call
//   - ctx *contexts.Context
//   - namespace string
//   - name string
//   - configuredSize resource.Quantity
//   - opts DRVolumeCreateOptions
func (_e *MockProviderInterface_Expecter) NewDRVolume(ctx interface{}, namespace interface{}, name interface{}, configuredSize interface{}, opts interface{}) *MockProviderInterface_NewDRVolume_Call {
	return &MockProviderInterface_NewDRVolume_Call{Call: _e.mock.On("NewDRVolume", ctx, namespace, name, configuredSize, opts)}
}

func (_c *MockProviderInterface_NewDRVolume_Call) Run(run func(ctx *contexts.Context, namespace string, name string, configuredSize resource.Quantity, opts DRVolumeCreateOptions)) *MockProviderInterface_NewDRVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context), args[1].(string), args[2].(string), args[3].(resource.Quantity), args[4].(DRVolumeCreateOptions))
	})
	return _c
}

func (_c *MockProviderInterface_NewDRVolume_Call) Return(_a0 DRVolumeInterface, _a1 error) *MockProviderInterface_NewDRVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderInterface_NewDRVolume_Call) RunAndReturn(run func(*contexts.Context, string, string, resource.Quantity, DRVolumeCreateOptions) (DRVolumeInterface, error)) *MockProviderInterface_NewDRVolume_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderInterface creates a new instance of MockProviderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderInterface {
	mock := &MockProviderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
