// Code generated by mockery v2.51.0. DO NOT EDIT.

package clusterusercert

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProviderInterface is an autogenerated mock type for the ProviderInterface type
type MockProviderInterface struct {
	mock.Mock
}

type MockProviderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderInterface) EXPECT() *MockProviderInterface_Expecter {
	return &MockProviderInterface_Expecter{mock: &_m.Mock}
}

// NewClusterUserCert provides a mock function with given fields: ctx, namespace, username, issuerName, clusterName, opts
func (_m *MockProviderInterface) NewClusterUserCert(ctx context.Context, namespace string, username string, issuerName string, clusterName string, opts NewClusterUserCertOpts) (*ClusterUserCert, error) {
	ret := _m.Called(ctx, namespace, username, issuerName, clusterName, opts)

	if len(ret) == 0 {
		panic("no return value specified for NewClusterUserCert")
	}

	var r0 *ClusterUserCert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, NewClusterUserCertOpts) (*ClusterUserCert, error)); ok {
		return rf(ctx, namespace, username, issuerName, clusterName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, NewClusterUserCertOpts) *ClusterUserCert); ok {
		r0 = rf(ctx, namespace, username, issuerName, clusterName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClusterUserCert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, NewClusterUserCertOpts) error); ok {
		r1 = rf(ctx, namespace, username, issuerName, clusterName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderInterface_NewClusterUserCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewClusterUserCert'
type MockProviderInterface_NewClusterUserCert_Call struct {
	*mock.Call
}

// NewClusterUserCert is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - username string
//   - issuerName string
//   - clusterName string
//   - opts NewClusterUserCertOpts
func (_e *MockProviderInterface_Expecter) NewClusterUserCert(ctx interface{}, namespace interface{}, username interface{}, issuerName interface{}, clusterName interface{}, opts interface{}) *MockProviderInterface_NewClusterUserCert_Call {
	return &MockProviderInterface_NewClusterUserCert_Call{Call: _e.mock.On("NewClusterUserCert", ctx, namespace, username, issuerName, clusterName, opts)}
}

func (_c *MockProviderInterface_NewClusterUserCert_Call) Run(run func(ctx context.Context, namespace string, username string, issuerName string, clusterName string, opts NewClusterUserCertOpts)) *MockProviderInterface_NewClusterUserCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(NewClusterUserCertOpts))
	})
	return _c
}

func (_c *MockProviderInterface_NewClusterUserCert_Call) Return(_a0 *ClusterUserCert, _a1 error) *MockProviderInterface_NewClusterUserCert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderInterface_NewClusterUserCert_Call) RunAndReturn(run func(context.Context, string, string, string, string, NewClusterUserCertOpts) (*ClusterUserCert, error)) *MockProviderInterface_NewClusterUserCert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderInterface creates a new instance of MockProviderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderInterface {
	mock := &MockProviderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
