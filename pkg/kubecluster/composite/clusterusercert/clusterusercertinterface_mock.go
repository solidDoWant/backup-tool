// Code generated by mockery v2.51.0. DO NOT EDIT.

package clusterusercert

import (
	contexts "github.com/solidDoWant/backup-tool/pkg/contexts"
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cert-manager/cert-manager/pkg/apis/certmanager/v1"

	v1alpha1 "github.com/cert-manager/approver-policy/pkg/apis/policy/v1alpha1"
)

// MockClusterUserCertInterface is an autogenerated mock type for the ClusterUserCertInterface type
type MockClusterUserCertInterface struct {
	mock.Mock
}

type MockClusterUserCertInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterUserCertInterface) EXPECT() *MockClusterUserCertInterface_Expecter {
	return &MockClusterUserCertInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx
func (_m *MockClusterUserCertInterface) Delete(ctx *contexts.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterUserCertInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockClusterUserCertInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx *contexts.Context
func (_e *MockClusterUserCertInterface_Expecter) Delete(ctx interface{}) *MockClusterUserCertInterface_Delete_Call {
	return &MockClusterUserCertInterface_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *MockClusterUserCertInterface_Delete_Call) Run(run func(ctx *contexts.Context)) *MockClusterUserCertInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context))
	})
	return _c
}

func (_c *MockClusterUserCertInterface_Delete_Call) Return(_a0 error) *MockClusterUserCertInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterUserCertInterface_Delete_Call) RunAndReturn(run func(*contexts.Context) error) *MockClusterUserCertInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificate provides a mock function with no fields
func (_m *MockClusterUserCertInterface) GetCertificate() *v1.Certificate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCertificate")
	}

	var r0 *v1.Certificate
	if rf, ok := ret.Get(0).(func() *v1.Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Certificate)
		}
	}

	return r0
}

// MockClusterUserCertInterface_GetCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificate'
type MockClusterUserCertInterface_GetCertificate_Call struct {
	*mock.Call
}

// GetCertificate is a helper method to define mock.On call
func (_e *MockClusterUserCertInterface_Expecter) GetCertificate() *MockClusterUserCertInterface_GetCertificate_Call {
	return &MockClusterUserCertInterface_GetCertificate_Call{Call: _e.mock.On("GetCertificate")}
}

func (_c *MockClusterUserCertInterface_GetCertificate_Call) Run(run func()) *MockClusterUserCertInterface_GetCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClusterUserCertInterface_GetCertificate_Call) Return(_a0 *v1.Certificate) *MockClusterUserCertInterface_GetCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterUserCertInterface_GetCertificate_Call) RunAndReturn(run func() *v1.Certificate) *MockClusterUserCertInterface_GetCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateRequestPolicy provides a mock function with no fields
func (_m *MockClusterUserCertInterface) GetCertificateRequestPolicy() *v1alpha1.CertificateRequestPolicy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateRequestPolicy")
	}

	var r0 *v1alpha1.CertificateRequestPolicy
	if rf, ok := ret.Get(0).(func() *v1alpha1.CertificateRequestPolicy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CertificateRequestPolicy)
		}
	}

	return r0
}

// MockClusterUserCertInterface_GetCertificateRequestPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateRequestPolicy'
type MockClusterUserCertInterface_GetCertificateRequestPolicy_Call struct {
	*mock.Call
}

// GetCertificateRequestPolicy is a helper method to define mock.On call
func (_e *MockClusterUserCertInterface_Expecter) GetCertificateRequestPolicy() *MockClusterUserCertInterface_GetCertificateRequestPolicy_Call {
	return &MockClusterUserCertInterface_GetCertificateRequestPolicy_Call{Call: _e.mock.On("GetCertificateRequestPolicy")}
}

func (_c *MockClusterUserCertInterface_GetCertificateRequestPolicy_Call) Run(run func()) *MockClusterUserCertInterface_GetCertificateRequestPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClusterUserCertInterface_GetCertificateRequestPolicy_Call) Return(_a0 *v1alpha1.CertificateRequestPolicy) *MockClusterUserCertInterface_GetCertificateRequestPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterUserCertInterface_GetCertificateRequestPolicy_Call) RunAndReturn(run func() *v1alpha1.CertificateRequestPolicy) *MockClusterUserCertInterface_GetCertificateRequestPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// setCRP provides a mock function with given fields: _a0
func (_m *MockClusterUserCertInterface) setCRP(_a0 *v1alpha1.CertificateRequestPolicy) {
	_m.Called(_a0)
}

// MockClusterUserCertInterface_setCRP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setCRP'
type MockClusterUserCertInterface_setCRP_Call struct {
	*mock.Call
}

// setCRP is a helper method to define mock.On call
//   - _a0 *v1alpha1.CertificateRequestPolicy
func (_e *MockClusterUserCertInterface_Expecter) setCRP(_a0 interface{}) *MockClusterUserCertInterface_setCRP_Call {
	return &MockClusterUserCertInterface_setCRP_Call{Call: _e.mock.On("setCRP", _a0)}
}

func (_c *MockClusterUserCertInterface_setCRP_Call) Run(run func(_a0 *v1alpha1.CertificateRequestPolicy)) *MockClusterUserCertInterface_setCRP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1alpha1.CertificateRequestPolicy))
	})
	return _c
}

func (_c *MockClusterUserCertInterface_setCRP_Call) Return() *MockClusterUserCertInterface_setCRP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClusterUserCertInterface_setCRP_Call) RunAndReturn(run func(*v1alpha1.CertificateRequestPolicy)) *MockClusterUserCertInterface_setCRP_Call {
	_c.Run(run)
	return _c
}

// setCertificate provides a mock function with given fields: _a0
func (_m *MockClusterUserCertInterface) setCertificate(_a0 *v1.Certificate) {
	_m.Called(_a0)
}

// MockClusterUserCertInterface_setCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setCertificate'
type MockClusterUserCertInterface_setCertificate_Call struct {
	*mock.Call
}

// setCertificate is a helper method to define mock.On call
//   - _a0 *v1.Certificate
func (_e *MockClusterUserCertInterface_Expecter) setCertificate(_a0 interface{}) *MockClusterUserCertInterface_setCertificate_Call {
	return &MockClusterUserCertInterface_setCertificate_Call{Call: _e.mock.On("setCertificate", _a0)}
}

func (_c *MockClusterUserCertInterface_setCertificate_Call) Run(run func(_a0 *v1.Certificate)) *MockClusterUserCertInterface_setCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Certificate))
	})
	return _c
}

func (_c *MockClusterUserCertInterface_setCertificate_Call) Return() *MockClusterUserCertInterface_setCertificate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClusterUserCertInterface_setCertificate_Call) RunAndReturn(run func(*v1.Certificate)) *MockClusterUserCertInterface_setCertificate_Call {
	_c.Run(run)
	return _c
}

// NewMockClusterUserCertInterface creates a new instance of MockClusterUserCertInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterUserCertInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterUserCertInterface {
	mock := &MockClusterUserCertInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
