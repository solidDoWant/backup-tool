// Code generated by mockery v2.51.0. DO NOT EDIT.

package clonedcluster

import (
	contexts "github.com/solidDoWant/backup-tool/pkg/contexts"
	mock "github.com/stretchr/testify/mock"
)

// MockProviderInterface is an autogenerated mock type for the ProviderInterface type
type MockProviderInterface struct {
	mock.Mock
}

type MockProviderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderInterface) EXPECT() *MockProviderInterface_Expecter {
	return &MockProviderInterface_Expecter{mock: &_m.Mock}
}

// CloneCluster provides a mock function with given fields: ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts
func (_m *MockProviderInterface) CloneCluster(ctx *contexts.Context, namespace string, existingClusterName string, newClusterName string, servingCertIssuerName string, clientCertIssuerName string, opts CloneClusterOptions) (ClonedClusterInterface, error) {
	ret := _m.Called(ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)

	if len(ret) == 0 {
		panic("no return value specified for CloneCluster")
	}

	var r0 ClonedClusterInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(*contexts.Context, string, string, string, string, string, CloneClusterOptions) (ClonedClusterInterface, error)); ok {
		return rf(ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)
	}
	if rf, ok := ret.Get(0).(func(*contexts.Context, string, string, string, string, string, CloneClusterOptions) ClonedClusterInterface); ok {
		r0 = rf(ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClonedClusterInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(*contexts.Context, string, string, string, string, string, CloneClusterOptions) error); ok {
		r1 = rf(ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderInterface_CloneCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneCluster'
type MockProviderInterface_CloneCluster_Call struct {
	*mock.Call
}

// CloneCluster is a helper method to define mock.On call
//   - ctx *contexts.Context
//   - namespace string
//   - existingClusterName string
//   - newClusterName string
//   - servingCertIssuerName string
//   - clientCertIssuerName string
//   - opts CloneClusterOptions
func (_e *MockProviderInterface_Expecter) CloneCluster(ctx interface{}, namespace interface{}, existingClusterName interface{}, newClusterName interface{}, servingCertIssuerName interface{}, clientCertIssuerName interface{}, opts interface{}) *MockProviderInterface_CloneCluster_Call {
	return &MockProviderInterface_CloneCluster_Call{Call: _e.mock.On("CloneCluster", ctx, namespace, existingClusterName, newClusterName, servingCertIssuerName, clientCertIssuerName, opts)}
}

func (_c *MockProviderInterface_CloneCluster_Call) Run(run func(ctx *contexts.Context, namespace string, existingClusterName string, newClusterName string, servingCertIssuerName string, clientCertIssuerName string, opts CloneClusterOptions)) *MockProviderInterface_CloneCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(CloneClusterOptions))
	})
	return _c
}

func (_c *MockProviderInterface_CloneCluster_Call) Return(cluster ClonedClusterInterface, err error) *MockProviderInterface_CloneCluster_Call {
	_c.Call.Return(cluster, err)
	return _c
}

func (_c *MockProviderInterface_CloneCluster_Call) RunAndReturn(run func(*contexts.Context, string, string, string, string, string, CloneClusterOptions) (ClonedClusterInterface, error)) *MockProviderInterface_CloneCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderInterface creates a new instance of MockProviderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderInterface {
	mock := &MockProviderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
