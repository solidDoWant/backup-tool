// Code generated by mockery v2.51.0. DO NOT EDIT.

package clonedcluster

import (
	context "context"

	apiv1 "github.com/cloudnative-pg/cloudnative-pg/api/v1"

	mock "github.com/stretchr/testify/mock"

	postgres "github.com/solidDoWant/backup-tool/pkg/postgres"

	v1 "github.com/cert-manager/cert-manager/pkg/apis/certmanager/v1"
)

// MockClonedClusterInterface is an autogenerated mock type for the ClonedClusterInterface type
type MockClonedClusterInterface struct {
	mock.Mock
}

type MockClonedClusterInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClonedClusterInterface) EXPECT() *MockClonedClusterInterface_Expecter {
	return &MockClonedClusterInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx
func (_m *MockClonedClusterInterface) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClonedClusterInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockClonedClusterInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClonedClusterInterface_Expecter) Delete(ctx interface{}) *MockClonedClusterInterface_Delete_Call {
	return &MockClonedClusterInterface_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *MockClonedClusterInterface_Delete_Call) Run(run func(ctx context.Context)) *MockClonedClusterInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClonedClusterInterface_Delete_Call) Return(_a0 error) *MockClonedClusterInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClonedClusterInterface_Delete_Call) RunAndReturn(run func(context.Context) error) *MockClonedClusterInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientCert provides a mock function with no fields
func (_m *MockClonedClusterInterface) GetClientCert() *v1.Certificate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientCert")
	}

	var r0 *v1.Certificate
	if rf, ok := ret.Get(0).(func() *v1.Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Certificate)
		}
	}

	return r0
}

// MockClonedClusterInterface_GetClientCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientCert'
type MockClonedClusterInterface_GetClientCert_Call struct {
	*mock.Call
}

// GetClientCert is a helper method to define mock.On call
func (_e *MockClonedClusterInterface_Expecter) GetClientCert() *MockClonedClusterInterface_GetClientCert_Call {
	return &MockClonedClusterInterface_GetClientCert_Call{Call: _e.mock.On("GetClientCert")}
}

func (_c *MockClonedClusterInterface_GetClientCert_Call) Run(run func()) *MockClonedClusterInterface_GetClientCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClonedClusterInterface_GetClientCert_Call) Return(_a0 *v1.Certificate) *MockClonedClusterInterface_GetClientCert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClonedClusterInterface_GetClientCert_Call) RunAndReturn(run func() *v1.Certificate) *MockClonedClusterInterface_GetClientCert_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with no fields
func (_m *MockClonedClusterInterface) GetCluster() *apiv1.Cluster {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *apiv1.Cluster
	if rf, ok := ret.Get(0).(func() *apiv1.Cluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv1.Cluster)
		}
	}

	return r0
}

// MockClonedClusterInterface_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type MockClonedClusterInterface_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
func (_e *MockClonedClusterInterface_Expecter) GetCluster() *MockClonedClusterInterface_GetCluster_Call {
	return &MockClonedClusterInterface_GetCluster_Call{Call: _e.mock.On("GetCluster")}
}

func (_c *MockClonedClusterInterface_GetCluster_Call) Run(run func()) *MockClonedClusterInterface_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClonedClusterInterface_GetCluster_Call) Return(_a0 *apiv1.Cluster) *MockClonedClusterInterface_GetCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClonedClusterInterface_GetCluster_Call) RunAndReturn(run func() *apiv1.Cluster) *MockClonedClusterInterface_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentials provides a mock function with given fields: servingCertMountDirectory, clientCertMountDirectory
func (_m *MockClonedClusterInterface) GetCredentials(servingCertMountDirectory string, clientCertMountDirectory string) postgres.Credentials {
	ret := _m.Called(servingCertMountDirectory, clientCertMountDirectory)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 postgres.Credentials
	if rf, ok := ret.Get(0).(func(string, string) postgres.Credentials); ok {
		r0 = rf(servingCertMountDirectory, clientCertMountDirectory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(postgres.Credentials)
		}
	}

	return r0
}

// MockClonedClusterInterface_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type MockClonedClusterInterface_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
//   - servingCertMountDirectory string
//   - clientCertMountDirectory string
func (_e *MockClonedClusterInterface_Expecter) GetCredentials(servingCertMountDirectory interface{}, clientCertMountDirectory interface{}) *MockClonedClusterInterface_GetCredentials_Call {
	return &MockClonedClusterInterface_GetCredentials_Call{Call: _e.mock.On("GetCredentials", servingCertMountDirectory, clientCertMountDirectory)}
}

func (_c *MockClonedClusterInterface_GetCredentials_Call) Run(run func(servingCertMountDirectory string, clientCertMountDirectory string)) *MockClonedClusterInterface_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClonedClusterInterface_GetCredentials_Call) Return(_a0 postgres.Credentials) *MockClonedClusterInterface_GetCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClonedClusterInterface_GetCredentials_Call) RunAndReturn(run func(string, string) postgres.Credentials) *MockClonedClusterInterface_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetServingCert provides a mock function with no fields
func (_m *MockClonedClusterInterface) GetServingCert() *v1.Certificate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServingCert")
	}

	var r0 *v1.Certificate
	if rf, ok := ret.Get(0).(func() *v1.Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Certificate)
		}
	}

	return r0
}

// MockClonedClusterInterface_GetServingCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServingCert'
type MockClonedClusterInterface_GetServingCert_Call struct {
	*mock.Call
}

// GetServingCert is a helper method to define mock.On call
func (_e *MockClonedClusterInterface_Expecter) GetServingCert() *MockClonedClusterInterface_GetServingCert_Call {
	return &MockClonedClusterInterface_GetServingCert_Call{Call: _e.mock.On("GetServingCert")}
}

func (_c *MockClonedClusterInterface_GetServingCert_Call) Run(run func()) *MockClonedClusterInterface_GetServingCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClonedClusterInterface_GetServingCert_Call) Return(_a0 *v1.Certificate) *MockClonedClusterInterface_GetServingCert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClonedClusterInterface_GetServingCert_Call) RunAndReturn(run func() *v1.Certificate) *MockClonedClusterInterface_GetServingCert_Call {
	_c.Call.Return(run)
	return _c
}

// setClientCert provides a mock function with given fields: cert
func (_m *MockClonedClusterInterface) setClientCert(cert *v1.Certificate) {
	_m.Called(cert)
}

// MockClonedClusterInterface_setClientCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setClientCert'
type MockClonedClusterInterface_setClientCert_Call struct {
	*mock.Call
}

// setClientCert is a helper method to define mock.On call
//   - cert *v1.Certificate
func (_e *MockClonedClusterInterface_Expecter) setClientCert(cert interface{}) *MockClonedClusterInterface_setClientCert_Call {
	return &MockClonedClusterInterface_setClientCert_Call{Call: _e.mock.On("setClientCert", cert)}
}

func (_c *MockClonedClusterInterface_setClientCert_Call) Run(run func(cert *v1.Certificate)) *MockClonedClusterInterface_setClientCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Certificate))
	})
	return _c
}

func (_c *MockClonedClusterInterface_setClientCert_Call) Return() *MockClonedClusterInterface_setClientCert_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClonedClusterInterface_setClientCert_Call) RunAndReturn(run func(*v1.Certificate)) *MockClonedClusterInterface_setClientCert_Call {
	_c.Run(run)
	return _c
}

// setCluster provides a mock function with given fields: cluster
func (_m *MockClonedClusterInterface) setCluster(cluster *apiv1.Cluster) {
	_m.Called(cluster)
}

// MockClonedClusterInterface_setCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setCluster'
type MockClonedClusterInterface_setCluster_Call struct {
	*mock.Call
}

// setCluster is a helper method to define mock.On call
//   - cluster *apiv1.Cluster
func (_e *MockClonedClusterInterface_Expecter) setCluster(cluster interface{}) *MockClonedClusterInterface_setCluster_Call {
	return &MockClonedClusterInterface_setCluster_Call{Call: _e.mock.On("setCluster", cluster)}
}

func (_c *MockClonedClusterInterface_setCluster_Call) Run(run func(cluster *apiv1.Cluster)) *MockClonedClusterInterface_setCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*apiv1.Cluster))
	})
	return _c
}

func (_c *MockClonedClusterInterface_setCluster_Call) Return() *MockClonedClusterInterface_setCluster_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClonedClusterInterface_setCluster_Call) RunAndReturn(run func(*apiv1.Cluster)) *MockClonedClusterInterface_setCluster_Call {
	_c.Run(run)
	return _c
}

// setServingCert provides a mock function with given fields: cert
func (_m *MockClonedClusterInterface) setServingCert(cert *v1.Certificate) {
	_m.Called(cert)
}

// MockClonedClusterInterface_setServingCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setServingCert'
type MockClonedClusterInterface_setServingCert_Call struct {
	*mock.Call
}

// setServingCert is a helper method to define mock.On call
//   - cert *v1.Certificate
func (_e *MockClonedClusterInterface_Expecter) setServingCert(cert interface{}) *MockClonedClusterInterface_setServingCert_Call {
	return &MockClonedClusterInterface_setServingCert_Call{Call: _e.mock.On("setServingCert", cert)}
}

func (_c *MockClonedClusterInterface_setServingCert_Call) Run(run func(cert *v1.Certificate)) *MockClonedClusterInterface_setServingCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Certificate))
	})
	return _c
}

func (_c *MockClonedClusterInterface_setServingCert_Call) Return() *MockClonedClusterInterface_setServingCert_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClonedClusterInterface_setServingCert_Call) RunAndReturn(run func(*v1.Certificate)) *MockClonedClusterInterface_setServingCert_Call {
	_c.Run(run)
	return _c
}

// NewMockClonedClusterInterface creates a new instance of MockClonedClusterInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClonedClusterInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClonedClusterInterface {
	mock := &MockClonedClusterInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
