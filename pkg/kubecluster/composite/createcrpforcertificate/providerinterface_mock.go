// Code generated by mockery v2.51.0. DO NOT EDIT.

package createcrpforcertificate

import (
	context "context"

	v1 "github.com/cert-manager/cert-manager/pkg/apis/certmanager/v1"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/cert-manager/approver-policy/pkg/apis/policy/v1alpha1"
)

// MockProviderInterface is an autogenerated mock type for the ProviderInterface type
type MockProviderInterface struct {
	mock.Mock
}

type MockProviderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderInterface) EXPECT() *MockProviderInterface_Expecter {
	return &MockProviderInterface_Expecter{mock: &_m.Mock}
}

// CreateCRPForCertificate provides a mock function with given fields: ctx, cert, opts
func (_m *MockProviderInterface) CreateCRPForCertificate(ctx context.Context, cert *v1.Certificate, opts CreateCRPForCertificateOpts) (*v1alpha1.CertificateRequestPolicy, error) {
	ret := _m.Called(ctx, cert, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateCRPForCertificate")
	}

	var r0 *v1alpha1.CertificateRequestPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Certificate, CreateCRPForCertificateOpts) (*v1alpha1.CertificateRequestPolicy, error)); ok {
		return rf(ctx, cert, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Certificate, CreateCRPForCertificateOpts) *v1alpha1.CertificateRequestPolicy); ok {
		r0 = rf(ctx, cert, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CertificateRequestPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Certificate, CreateCRPForCertificateOpts) error); ok {
		r1 = rf(ctx, cert, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderInterface_CreateCRPForCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCRPForCertificate'
type MockProviderInterface_CreateCRPForCertificate_Call struct {
	*mock.Call
}

// CreateCRPForCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - cert *v1.Certificate
//   - opts CreateCRPForCertificateOpts
func (_e *MockProviderInterface_Expecter) CreateCRPForCertificate(ctx interface{}, cert interface{}, opts interface{}) *MockProviderInterface_CreateCRPForCertificate_Call {
	return &MockProviderInterface_CreateCRPForCertificate_Call{Call: _e.mock.On("CreateCRPForCertificate", ctx, cert, opts)}
}

func (_c *MockProviderInterface_CreateCRPForCertificate_Call) Run(run func(ctx context.Context, cert *v1.Certificate, opts CreateCRPForCertificateOpts)) *MockProviderInterface_CreateCRPForCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Certificate), args[2].(CreateCRPForCertificateOpts))
	})
	return _c
}

func (_c *MockProviderInterface_CreateCRPForCertificate_Call) Return(_a0 *v1alpha1.CertificateRequestPolicy, _a1 error) *MockProviderInterface_CreateCRPForCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderInterface_CreateCRPForCertificate_Call) RunAndReturn(run func(context.Context, *v1.Certificate, CreateCRPForCertificateOpts) (*v1alpha1.CertificateRequestPolicy, error)) *MockProviderInterface_CreateCRPForCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderInterface creates a new instance of MockProviderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderInterface {
	mock := &MockProviderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
