// Code generated by mockery v2.51.0. DO NOT EDIT.

package postgres

import (
	contexts "github.com/solidDoWant/backup-tool/pkg/contexts"
	mock "github.com/stretchr/testify/mock"
)

// MockRuntime is an autogenerated mock type for the Runtime type
type MockRuntime struct {
	mock.Mock
}

type MockRuntime_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuntime) EXPECT() *MockRuntime_Expecter {
	return &MockRuntime_Expecter{mock: &_m.Mock}
}

// DumpAll provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockRuntime) DumpAll(_a0 *contexts.Context, _a1 Credentials, _a2 string, _a3 DumpAllOptions) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for DumpAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.Context, Credentials, string, DumpAllOptions) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntime_DumpAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DumpAll'
type MockRuntime_DumpAll_Call struct {
	*mock.Call
}

// DumpAll is a helper method to define mock.On call
//   - _a0 *contexts.Context
//   - _a1 Credentials
//   - _a2 string
//   - _a3 DumpAllOptions
func (_e *MockRuntime_Expecter) DumpAll(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockRuntime_DumpAll_Call {
	return &MockRuntime_DumpAll_Call{Call: _e.mock.On("DumpAll", _a0, _a1, _a2, _a3)}
}

func (_c *MockRuntime_DumpAll_Call) Run(run func(_a0 *contexts.Context, _a1 Credentials, _a2 string, _a3 DumpAllOptions)) *MockRuntime_DumpAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*contexts.Context), args[1].(Credentials), args[2].(string), args[3].(DumpAllOptions))
	})
	return _c
}

func (_c *MockRuntime_DumpAll_Call) Return(_a0 error) *MockRuntime_DumpAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntime_DumpAll_Call) RunAndReturn(run func(*contexts.Context, Credentials, string, DumpAllOptions) error) *MockRuntime_DumpAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRuntime creates a new instance of MockRuntime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntime(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuntime {
	mock := &MockRuntime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
