// Code generated by mockery v2.51.0. DO NOT EDIT.

package disasterrecovery

import (
	cobra "github.com/spf13/cobra"
	mock "github.com/stretchr/testify/mock"
)

// MockDREventCommand is an autogenerated mock type for the DREventCommand type
type MockDREventCommand struct {
	mock.Mock
}

type MockDREventCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDREventCommand) EXPECT() *MockDREventCommand_Expecter {
	return &MockDREventCommand_Expecter{mock: &_m.Mock}
}

// ConfigureFlags provides a mock function with given fields: cmd
func (_m *MockDREventCommand) ConfigureFlags(cmd *cobra.Command) {
	_m.Called(cmd)
}

// MockDREventCommand_ConfigureFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureFlags'
type MockDREventCommand_ConfigureFlags_Call struct {
	*mock.Call
}

// ConfigureFlags is a helper method to define mock.On call
//   - cmd *cobra.Command
func (_e *MockDREventCommand_Expecter) ConfigureFlags(cmd interface{}) *MockDREventCommand_ConfigureFlags_Call {
	return &MockDREventCommand_ConfigureFlags_Call{Call: _e.mock.On("ConfigureFlags", cmd)}
}

func (_c *MockDREventCommand_ConfigureFlags_Call) Run(run func(cmd *cobra.Command)) *MockDREventCommand_ConfigureFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cobra.Command))
	})
	return _c
}

func (_c *MockDREventCommand_ConfigureFlags_Call) Return() *MockDREventCommand_ConfigureFlags_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDREventCommand_ConfigureFlags_Call) RunAndReturn(run func(*cobra.Command)) *MockDREventCommand_ConfigureFlags_Call {
	_c.Run(run)
	return _c
}

// Run provides a mock function with no fields
func (_m *MockDREventCommand) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDREventCommand_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockDREventCommand_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockDREventCommand_Expecter) Run() *MockDREventCommand_Run_Call {
	return &MockDREventCommand_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockDREventCommand_Run_Call) Run(run func()) *MockDREventCommand_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDREventCommand_Run_Call) Return(_a0 error) *MockDREventCommand_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDREventCommand_Run_Call) RunAndReturn(run func() error) *MockDREventCommand_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDREventCommand creates a new instance of MockDREventCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDREventCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDREventCommand {
	mock := &MockDREventCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
