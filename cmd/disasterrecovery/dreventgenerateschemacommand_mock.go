// Code generated by mockery v2.51.0. DO NOT EDIT.

package disasterrecovery

import (
	cobra "github.com/spf13/cobra"
	mock "github.com/stretchr/testify/mock"
)

// MockDREventGenerateSchemaCommand is an autogenerated mock type for the DREventGenerateSchemaCommand type
type MockDREventGenerateSchemaCommand struct {
	mock.Mock
}

type MockDREventGenerateSchemaCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDREventGenerateSchemaCommand) EXPECT() *MockDREventGenerateSchemaCommand_Expecter {
	return &MockDREventGenerateSchemaCommand_Expecter{mock: &_m.Mock}
}

// ConfigureFlags provides a mock function with given fields: cmd
func (_m *MockDREventGenerateSchemaCommand) ConfigureFlags(cmd *cobra.Command) {
	_m.Called(cmd)
}

// MockDREventGenerateSchemaCommand_ConfigureFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureFlags'
type MockDREventGenerateSchemaCommand_ConfigureFlags_Call struct {
	*mock.Call
}

// ConfigureFlags is a helper method to define mock.On call
//   - cmd *cobra.Command
func (_e *MockDREventGenerateSchemaCommand_Expecter) ConfigureFlags(cmd interface{}) *MockDREventGenerateSchemaCommand_ConfigureFlags_Call {
	return &MockDREventGenerateSchemaCommand_ConfigureFlags_Call{Call: _e.mock.On("ConfigureFlags", cmd)}
}

func (_c *MockDREventGenerateSchemaCommand_ConfigureFlags_Call) Run(run func(cmd *cobra.Command)) *MockDREventGenerateSchemaCommand_ConfigureFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cobra.Command))
	})
	return _c
}

func (_c *MockDREventGenerateSchemaCommand_ConfigureFlags_Call) Return() *MockDREventGenerateSchemaCommand_ConfigureFlags_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDREventGenerateSchemaCommand_ConfigureFlags_Call) RunAndReturn(run func(*cobra.Command)) *MockDREventGenerateSchemaCommand_ConfigureFlags_Call {
	_c.Run(run)
	return _c
}

// GenerateConfigSchema provides a mock function with no fields
func (_m *MockDREventGenerateSchemaCommand) GenerateConfigSchema() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateConfigSchema")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateConfigSchema'
type MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call struct {
	*mock.Call
}

// GenerateConfigSchema is a helper method to define mock.On call
func (_e *MockDREventGenerateSchemaCommand_Expecter) GenerateConfigSchema() *MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call {
	return &MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call{Call: _e.mock.On("GenerateConfigSchema")}
}

func (_c *MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call) Run(run func()) *MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call) Return(_a0 []byte, _a1 error) *MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call) RunAndReturn(run func() ([]byte, error)) *MockDREventGenerateSchemaCommand_GenerateConfigSchema_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with no fields
func (_m *MockDREventGenerateSchemaCommand) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDREventGenerateSchemaCommand_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockDREventGenerateSchemaCommand_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockDREventGenerateSchemaCommand_Expecter) Run() *MockDREventGenerateSchemaCommand_Run_Call {
	return &MockDREventGenerateSchemaCommand_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockDREventGenerateSchemaCommand_Run_Call) Run(run func()) *MockDREventGenerateSchemaCommand_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDREventGenerateSchemaCommand_Run_Call) Return(_a0 error) *MockDREventGenerateSchemaCommand_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDREventGenerateSchemaCommand_Run_Call) RunAndReturn(run func() error) *MockDREventGenerateSchemaCommand_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDREventGenerateSchemaCommand creates a new instance of MockDREventGenerateSchemaCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDREventGenerateSchemaCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDREventGenerateSchemaCommand {
	mock := &MockDREventGenerateSchemaCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
