---
{{/* Template config values that the library doesn't */}}
{{- $controller := index .Values "resources" "controllers" "backup-tool" -}}
{{- $_ := set $controller "type" (tpl (index $controller "type") .) -}}
{{- $cronjob := $controller.cronjob -}}
{{- $_ := set $cronjob "schedule" (tpl $cronjob.schedule .) -}}

{{- $container := index $controller "containers" "backup-tool" -}}
{{- $args := $container.args -}}
{{- $templatedArgs := list -}}
{{- range $index, $arg := $args -}}
{{- $templatedArgs = append $templatedArgs (tpl $arg $) -}}
{{- end -}}
{{- $_ := set $container "args" $templatedArgs -}}

{{- if eq .Values.jobConfig.configType "ConfigMap" -}}
    {{/* Setup the resources */}}
    {{- $configMap := dict "config" (dict "data" (dict "config.yaml" (.Values.jobConfig.configFile | toYaml))) -}}
    {{- $persistence := dict "backup-tool" (dict "type" "configMap") -}}

    {{/* Merge and load the values */}}
    {{- $mergedResources := mustMergeOverwrite (dict "configMaps" $configMap "persistence" $persistence) .Values.resources -}}
    {{- $_ := set .Values "resources" $mergedResources -}}
{{- else if eq .Values.jobConfig.configType "Secret" -}}
    {{/* Setup the resources */}}
    {{- $secret := dict "config" (dict "stringData" (dict "config.yaml" (.Values.jobConfig.configFile | toYaml))) -}}
    {{- $persistence := dict "backup-tool" (dict "type" "secret") -}}

    {{/* Merge and load the values */}}
    {{- $mergedResources := mustMergeOverwrite (dict "secrets" $secret "persistence" $persistence) .Values.resources -}}
    {{- $_ := set .Values "resources" $mergedResources -}}
{{- else if .Values.jobConfig.configFile -}}
    {{/* If any other value is set, fail. A null value (~) will cause no failure, but no config. */}}
    {{- fail (printf "Invalid config type %s" .Values.jobConfig.configType) -}}
{{- end -}}

{{/* Merge all the values into the format that the common library expects */}}
{{- $mergedValues := mustDeepCopy .Values -}}
{{- $mergedValues = omit $mergedValues "resources" "jobConfig" -}}
{{- $mergedValues = mustMergeOverwrite $mergedValues (mustDeepCopy .Values.resources) -}}
{{- $_ := set . "Values" $mergedValues }}

{{/* Hand off to the common library for validation, templating, and rendering */}}
{{- include "bjw-s.common.loader.init" . }}
{{ include "bjw-s.common.loader.generate" . }}
